{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":";;AAyBA,gEAAqD;AAErD,gDAAgD;AAChD,oEAAoE;AAEpE,gDAAqF;AAA5E,kCAAA,OAAO,CAAc;AAAe,oCAAA,YAAY,CAAA;AACzD,kBAAe,wBAAU,CAAC;AAE1B,kDAA4D;AAe5D,mBAAoB,SAAQ,wBAAwB;IAEhD;QACI,KAAK,EAAE,CAAC;IACZ,CAAC;IAEM,IAAI,CAAC,EAAE;QACV,MAAM,CAAC,OAAO,CAAC,MAAM,CAAO,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAC9D,CAAC;IAEM,OAAO,CAAC,SAAS;QACpB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAS,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAChE,CAAC;IAEM,MAAM,CAAC,MAAM;QAChB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAU,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACjE,CAAC;IAEM,MAAM,CAAC,MAAM;QAChB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAU,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACjE,CAAC;IAEM,MAAM,CAAC,MAAY;QACtB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAO,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAC9D,CAAC;IAEM,aAAa,CAAC,KAAwB;QACzC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;CACJ;AAED,IAAI,UAAU,GAAG,IAAI,aAAa,EAAE,CAAC;AAErC,IAAI,IAAI,GAAG,UAAU,CAAC,aAAa,CAAC,IAAI,oBAAU,EAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC,CAAC,CAAC;AAEpG,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,WAAW,CAAC,CACpC,CAAC;AACD,CAAC","sourcesContent":["// instead of having \"lib: [\"esnext.asynciterable\"] in tsconfig.json\r\ndeclare global {\r\n    interface SymbolConstructor {\r\n        /**\r\n         * A method that returns the default async iterator for an object. Called by the semantics of\r\n         * the for-await-of statement.\r\n         */\r\n        readonly asyncIterator: symbol;\r\n    }\r\n\r\n    interface AsyncIterator<T> {\r\n        next(value?: any): Promise<IteratorResult<T>>;\r\n        return?(value?: any): Promise<IteratorResult<T>>;\r\n        throw?(e?: any): Promise<IteratorResult<T>>;\r\n    }\r\n\r\n    interface AsyncIterable<T> {\r\n        [Symbol.asyncIterator](): AsyncIterator<T>;\r\n    }\r\n\r\n    interface AsyncIterableIterator<T> extends AsyncIterator<T> {\r\n        [Symbol.asyncIterator](): AsyncIterableIterator<T>;\r\n    }\r\n}\r\n\r\nimport Repository from './repository/baserepository';\r\n\r\n//export { Query } from './repository/db/query';\r\n//export { IRecordSet, RecordSet } from './repository/db/recordset';\r\n\r\nexport { default as Enumerable, IEnumerable, OperatorType } from './linq/enumerable';\r\nexport default Repository;\r\n\r\nimport Enumerable, { IEnumerable } from './linq/enumerable';\r\n\r\ninterface ICar {\r\n\r\n    id: number\r\n    location: string\r\n\r\n    registrationYear: number\r\n\r\n    type: {\r\n        make: string\r\n        model: string\r\n    }\r\n}\r\n\r\nclass CarRepository extends Repository<ICar, number>\r\n{\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public read(id) {\r\n        return Promise.reject<ICar>(new Error('Not implemented'));\r\n    }\r\n\r\n    public readAll(predicate) {\r\n        return Promise.reject<ICar[]>(new Error('Not implemented'));\r\n    }\r\n\r\n    public delete(entity) {\r\n        return Promise.reject<boolean>(new Error('Not implemented'));\r\n    }\r\n\r\n    public update(entity) {\r\n        return Promise.reject<boolean>(new Error('Not implemented'));\r\n    }\r\n\r\n    public create(entity: ICar) {\r\n        return Promise.reject<ICar>(new Error('Not implemented'));\r\n    }\r\n\r\n    public exposeFilters(query: IEnumerable<ICar>) {\r\n        return super.getCriteria(query);\r\n    }\r\n}\r\n\r\nvar repository = new CarRepository();\r\n\r\nvar list = repository.exposeFilters(new Enumerable<ICar>().where(car => car.type.make == \"Toyota\"));\r\n\r\nif (list[0].property == 'type.make')\r\n{\r\n}"]}