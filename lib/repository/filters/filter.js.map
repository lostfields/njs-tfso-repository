{"version":3,"file":"filter.js","sourceRoot":"","sources":["../../../src/repository/filters/filter.ts"],"names":[],"mappings":";;AAAA,kFAAgM;AAChM,qDAAmE;AAMnE;IAGI,YAAY,QAAgC;QACxC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAED,IAAW,QAAQ;QACf,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,UAA8B;QAC9C,IAAI,MAAM,GAAmB,EAAE,CAAC;QAEhC,MAAM,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC1B,KAAK,uCAAmB,CAAC,EAAE;gBACvB,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAiB;oBAC1D,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,kCAAc,CAAC,OAAO,CAAC,CAAC,CAAC;wBACtC,MAAM,CAAC,CAAsB,IAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;4BAC1C,KAAK,uCAAmB,CAAC,EAAE;gCACvB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,KAAK,CAAqB,IAAI,CAAC,CAAC,CAAC,CAAC;gCAAC,KAAK,CAAC;4BAE5E;gCACI,MAAM,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,+BAAc,CAAC,KAAK,CAAqB,IAAI,CAAC,CAAC,CAAC,CAAC;gCAAC,KAAK,CAAC;wBACvF,CAAC;oBACL,CAAC;gBAEL,CAAC,CAAC,CAAC;gBAEH,KAAK,CAAC;YACV;gBACI,MAAM,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,+BAAc,CAAC,KAAK,CAAqB,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC9E,KAAK,CAAC;QAEd,CAAC;QAED,oDAAoD;QACpD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM;YACxB,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAA;QACrC,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAzCD,wBAyCC","sourcesContent":["import { IExpression, ExpressionType, ILogicalExpression, LogicalOperatorType, IMemberExpression, ILiteralExpression, IIdentifierExpression } from './../../linq/expressions/expressionvisitor';\r\nimport { IFilterCriteria, FilterCriteria } from './filtercriteria';\r\n\r\nexport interface IFilter {\r\n    criteria: Array<IFilterCriteria>\r\n}\r\n\r\nexport class Filter implements IFilter {\r\n    private _criteria: Array<IFilterCriteria>\r\n\r\n    constructor(criteria: Array<IFilterCriteria>) {\r\n        this._criteria = criteria;\r\n    }\r\n\r\n    public get criteria() {\r\n        return this._criteria;\r\n    }\r\n\r\n    public static visit(expression: ILogicalExpression): Array<IFilter> {\r\n        var result: Array<IFilter> = [];\r\n\r\n        switch (expression.operator) {\r\n            case LogicalOperatorType.Or:\r\n                [expression.left, expression.right].forEach((expr: IExpression) => {\r\n                    if (expr.type == ExpressionType.Logical) {\r\n                        switch ((<ILogicalExpression>expr).operator) {\r\n                            case LogicalOperatorType.Or:\r\n                                result = result.concat((Filter.visit(<ILogicalExpression>expr))); break;\r\n\r\n                            default:\r\n                                result.push(new Filter(FilterCriteria.visit(<ILogicalExpression>expr))); break;\r\n                        }\r\n                    }\r\n\r\n                });\r\n\r\n                break;\r\n            default:\r\n                result.push(new Filter(FilterCriteria.visit(<ILogicalExpression>expression)));\r\n                break;\r\n\r\n        }\r\n\r\n        // return only filters that has one or more criteria\r\n        return result.filter((filter) => {\r\n            return filter.criteria.length > 0\r\n        });\r\n    }\r\n}"]}