{"version":3,"file":"baserepository.js","sourceRoot":"","sources":["../../src/repository/baserepository.ts"],"names":[],"mappings":";;AAAA,+CAAsD;AAEtD,qEAAkE;AAgBlE;IAEI;IAEA,CAAC;IAoBM,gBAAgB;QACnB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAEM,iBAAiB;QACpB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAEM,mBAAmB;QACtB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACO,UAAU,CAAC,KAA2B;QAC5C,IAAI,UAAe,CAAC;QAEpB,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;YAC3C,EAAE,CAAC,CAAC,QAAQ,YAAY,6BAAa,CAAC,CAAC,CAAC;gBACpC,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;gBAEjC,KAAK,CAAC;YACV,CAAC;QAEL,MAAM,CAAC,IAAI,iBAAO,CAAU,UAAU,CAAC,CAAC;IAC5C,CAAC;IAEM,cAAc,CAAC,KAA2B;QAC7C,IAAI,UAAe,CAAC;QAEpB,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;YAC3C,EAAE,CAAC,CAAC,QAAQ,YAAY,6BAAa,CAAC,CAAC,CAAC;gBACpC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;YAC9B,CAAC;QAEL,MAAM,CAAC,CAAC,MAAe;YACnB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC;IACN,CAAC;CACJ;AAED,kBAAe,cAAc,CAAA","sourcesContent":["import { IFilters, Filters } from './filters/filters';\r\nimport Enumerable, { IEnumerable } from './../linq/enumerable';\r\nimport { WhereOperator } from './../linq/operators/whereoperator';\r\n\r\nimport { IRecordSetMeta } from './db/recordset';\r\n\r\nexport { IEnumerable, IRecordSetMeta }\r\n\r\nexport interface IBaseRepository<TEntity, TEntityId> {\r\n    create(entity: TEntity, meta?: IRecordSetMeta): Promise<TEntity>\r\n\r\n    read(id: TEntityId, meta?: IRecordSetMeta): Promise<TEntity>\r\n    readAll(query: IEnumerable<TEntity>, meta?: IRecordSetMeta): Promise<TEntity[]>\r\n\r\n    update(entity: TEntity, meta?: IRecordSetMeta): Promise<boolean>\r\n    delete(entity: TEntity, meta?: IRecordSetMeta): Promise<boolean>\r\n}\r\n\r\nabstract class BaseRepository<TEntity, TEntityId> implements IBaseRepository<TEntity, TEntityId>\r\n{\r\n    constructor() {\r\n\r\n    }\r\n\r\n    abstract read(id: TEntityId): Promise<TEntity>\r\n    abstract read(id: TEntityId, meta?: IRecordSetMeta): Promise<TEntity>\r\n\r\n    // ((t) => t.gender == 'female' && t.age >= 16)({gender: 'female', age: 17})     => true\r\n    // ((t) => t.gender == 'female' && t.age >= 16).toString()                       => (t) => t.gender == \\'female\\' && t.age >= 16\r\n    abstract readAll(query: IEnumerable<TEntity>): Promise<TEntity[]>\r\n    abstract readAll(query: IEnumerable<TEntity>, meta?: IRecordSetMeta): Promise<TEntity[]>\r\n\r\n    abstract create(entity: TEntity): Promise<TEntity>\r\n    abstract create(entity: TEntity, meta?: IRecordSetMeta): Promise<TEntity>\r\n\r\n    abstract update(entity: TEntity): Promise<boolean>\r\n    abstract update(entity: TEntity, meta?: IRecordSetMeta): Promise<boolean>\r\n\r\n    abstract delete(entity: TEntity): Promise<boolean>\r\n    abstract delete(entity: TEntity, meta?: IRecordSetMeta): Promise<boolean>\r\n\r\n\r\n    public beginTransaction(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public commitTransaction(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public rollbackTransaction(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * returns a IFilters if the predicate is solvable, otherwise it throws an error\r\n     * @param predicate\r\n     * @param parameters\r\n     */\r\n    protected getFilters(query: IEnumerable<TEntity>): IFilters {\r\n        let expression: any;\r\n\r\n        for (let operator of query.operations.values())\r\n            if (operator instanceof WhereOperator) {\r\n                expression = operator.expression;\r\n\r\n                break;\r\n            }\r\n\r\n        return new Filters<TEntity>(expression);\r\n    }\r\n\r\n    public getPredicateFn(query: IEnumerable<TEntity>): (element: TEntity) => boolean {\r\n        let expression: any;\r\n\r\n        for (let operator of query.operations.values())\r\n            if (operator instanceof WhereOperator) {\r\n                return operator.predicate;\r\n            }\r\n\r\n        return (entity: TEntity) => {\r\n            return true;\r\n        };\r\n    }\r\n}\r\n\r\nexport default BaseRepository\r\n\r\n"]}