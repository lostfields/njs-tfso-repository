{"version":3,"file":"javascriptvisitor.js","sourceRoot":"","sources":["../../src/test/javascriptvisitor.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AACjC,gEAAgE;AAChE,+EAA4E;AAE5E,QAAQ,CAAC,8BAA8B,EAAE;IACrC,IAAI,MAAyB,EACzB,IAAI,GAAG,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,sBAAsB,CAAC,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;IAEtH,UAAU,CAAC;QACP,MAAM,GAAG,IAAI,qCAAiB,EAAE,CAAC;IACrC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,2DAA2D,EAAE;QAC5D,IAAI,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EACzC,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAE1C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACrD,MAAM,CAAC,KAAK,CAA0B,IAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,mDAAmD,EAAE;QACpD,IAAI,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,WAAW,EAAE,CAAC,EACvD,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAE1C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACrD,MAAM,CAAC,KAAK,CAA0B,IAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,qDAAqD,EAAE;QACtD,IAAI,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,EAC7D,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAE1C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACrD,MAAM,CAAC,KAAK,CAA0B,IAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAA","sourcesContent":["import * as assert from 'assert';\nimport * as Expr from './../linq/expressions/expressionvisitor';\nimport { JavascriptVisitor } from './../linq/expressions/javascriptvisitor';\n\ndescribe(\"When using JavascriptVisitor\", () => {\n    var parser: JavascriptVisitor,\n        vars = { number: 5, string: 'abc', decimal: 5.50, date: new Date(\"2017-05-10T06:48:00Z\"), object: { number: 7 } };\n\n    beforeEach(() => {\n        parser = new JavascriptVisitor();\n    })\n\n    it(\"should evaluate a simple expression with binary operation\", () => {\n        let reduced = parser.visitLambda(() => 2 + 3),\n            expr = parser.evaluate(reduced, vars);\n\n        assert.equal(expr.type, Expr.ExpressionType.Literal);\n        assert.equal((<Expr.LiteralExpression>expr).value, 5);\n    })\n\n    it(\"should be able to do string operations at literal\", () => {\n        let reduced = parser.visitLambda(() => \"ABC\".toLowerCase()),\n            expr = parser.evaluate(reduced, vars);\n\n        assert.equal(expr.type, Expr.ExpressionType.Literal);\n        assert.equal((<Expr.LiteralExpression>expr).value, 'abc');\n    })\n\n    it(\"should be able to do string operations at variables\", () => {\n        let reduced = parser.visitLambda(() => this.string.toUpperCase()),\n            expr = parser.evaluate(reduced, vars);\n\n        assert.equal(expr.type, Expr.ExpressionType.Literal);\n        assert.equal((<Expr.LiteralExpression>expr).value, 'ABC');\n    })\n})"]}