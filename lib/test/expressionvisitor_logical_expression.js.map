{"version":3,"file":"expressionvisitor_logical_expression.js","sourceRoot":"","sources":["../../src/test/expressionvisitor_logical_expression.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from 'assert';\r\nimport * as Expr from './../linq/expressions/expressionvisitor';\r\n\r\ndescribe(\"When using ExpressionVisitor for logical\", () => {\r\n    var visitor: Expr.ExpressionVisitor,\r\n        expr: Expr.IExpression;\r\n\r\n    beforeEach(() => {\r\n        visitor = new Expr.ExpressionVisitor;\r\n    })\r\n\r\n    describe(\"OData expression\", () => {\r\n        it(\"it should return a logical operation\", () => {\r\n            expr = visitor.visitOData(\"5 gt 2 and 2 lt 5\");\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Logical, \"Expected a LogicalExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).left.type == Expr.ExpressionType.Logical, \"Expected a logical expression at left side\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).right.type == Expr.ExpressionType.Logical, \"Expected a logical expression at right side\");\r\n            assert.ok((<Expr.ILogicalExpression>(<Expr.IBinaryExpression>expr).left).operator == Expr.LogicalOperatorType.Greater, \"Expected a binary operation of greather than at left side\");\r\n            assert.ok((<Expr.ILogicalExpression>(<Expr.IBinaryExpression>expr).right).operator == Expr.LogicalOperatorType.Lesser, \"Expected a binary operation of lesser than at right side\");\r\n        });\r\n\r\n        it(\"it should handle logical operation for and\", () => {\r\n            expr = visitor.visitOData(\"5 gt 2 and 2 lt 5\");\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Logical, \"Expected a LogicalExpression\");\r\n            assert.ok((<Expr.ILogicalExpression>expr).operator == Expr.LogicalOperatorType.And, \"Expected a binary operation of and\");            \r\n        });\r\n\r\n        it(\"it should handle logical operation for or\", () => {\r\n            expr = visitor.visitOData(\"5 gt 2 or 2 lt 5\");\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Logical, \"Expected a LogicalExpression\");\r\n            assert.ok((<Expr.ILogicalExpression>expr).operator == Expr.LogicalOperatorType.Or, \"Expected a binary operation of or\");\r\n        });\r\n\r\n        it(\"it should handle logical operation for equal\", () => {\r\n            expr = visitor.visitOData(\"5 eq 2\");\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Logical, \"Expected a LogicalExpression\");\r\n            assert.ok((<Expr.ILogicalExpression>expr).operator == Expr.LogicalOperatorType.Equal, \"Expected a binary operation of equal\");\r\n        });\r\n\r\n        it(\"it should handle logical operation for not equal\", () => {\r\n            expr = visitor.visitOData(\"5 ne 2\");\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Logical, \"Expected a LogicalExpression\");\r\n            assert.ok((<Expr.ILogicalExpression>expr).operator == Expr.LogicalOperatorType.NotEqual, \"Expected a binary operation of not equal\");\r\n        });\r\n\r\n        it(\"it should handle logical operation for greater than\", () => {\r\n            expr = visitor.visitOData(\"5 gt 2\");\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Logical, \"Expected a LogicalExpression\");\r\n            assert.ok((<Expr.ILogicalExpression>expr).operator == Expr.LogicalOperatorType.Greater, \"Expected a binary operation of greather than\");\r\n        });\r\n\r\n        it(\"it should handle logical operation for greater or equal than\", () => {\r\n            expr = visitor.visitOData(\"5 ge 2\");\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Logical, \"Expected a LogicalExpression\");\r\n            assert.ok((<Expr.ILogicalExpression>expr).operator == Expr.LogicalOperatorType.GreaterOrEqual, \"Expected a binary operation of greater or equal than\");\r\n        });\r\n\r\n        it(\"it should handle logical operation for lesser\", () => {\r\n            expr = visitor.visitOData(\"5 lt 2\");\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Logical, \"Expected a LogicalExpression\");\r\n            assert.ok((<Expr.ILogicalExpression>expr).operator == Expr.LogicalOperatorType.Lesser, \"Expected a binary operation of lesser\");\r\n        });\r\n\r\n        it(\"it should handle logical operation for or\", () => {\r\n            expr = visitor.visitOData(\"5 le 2\");\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Logical, \"Expected a LogicalExpression\");\r\n            assert.ok((<Expr.ILogicalExpression>expr).operator == Expr.LogicalOperatorType.LesserOrEqual, \"Expected a binary operation of lesser or equal than\");\r\n        });\r\n    })\r\n\r\n    describe(\"Lambda expression\", () => {\r\n        it(\"it should return a logical operation\", () => {\r\n            expr = visitor.visitLambda(() => 5 && 2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Logical, \"Expected a LogicalExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).left.type == Expr.ExpressionType.Literal, \"Expected a literal at left side\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).right.type == Expr.ExpressionType.Literal, \"Expected a lteral at right side\");\r\n            assert.ok((<Expr.ILiteralExpression>(<Expr.IBinaryExpression>expr).left).value == 5, \"Expected number 5 at left side\");\r\n            assert.ok((<Expr.ILiteralExpression>(<Expr.IBinaryExpression>expr).right).value == 2, \"Expected number 5 at right side\");\r\n        });\r\n\r\n        it(\"it should handle logical operation for and\", () => {\r\n            expr = visitor.visitLambda(() => 5 && 2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Logical, \"Expected a LogicalExpression\");\r\n            assert.ok((<Expr.ILogicalExpression>expr).operator == Expr.LogicalOperatorType.And, \"Expected a binary operation of and\");\r\n        });\r\n\r\n        it(\"it should handle logical operation for or\", () => {\r\n            expr = visitor.visitLambda(() => 5 || 2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Logical, \"Expected a LogicalExpression\");\r\n            assert.ok((<Expr.ILogicalExpression>expr).operator == Expr.LogicalOperatorType.Or, \"Expected a binary operation of or\");\r\n        });\r\n\r\n        it(\"it should handle logical operation for equal\", () => {\r\n            expr = visitor.visitLambda(() => <number>5 == <number>2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Logical, \"Expected a LogicalExpression\");\r\n            assert.ok((<Expr.ILogicalExpression>expr).operator == Expr.LogicalOperatorType.Equal, \"Expected a binary operation of equal\");\r\n        });\r\n\r\n        it(\"it should handle logical operation for not equal\", () => {\r\n            expr = visitor.visitLambda(() => <number>5 != <number>2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Logical, \"Expected a LogicalExpression\");\r\n            assert.ok((<Expr.ILogicalExpression>expr).operator == Expr.LogicalOperatorType.NotEqual, \"Expected a binary operation of not equal\");\r\n        });\r\n\r\n        it(\"it should handle logical operation for greater than\", () => {\r\n            expr = visitor.visitLambda(() => 5 > 2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Logical, \"Expected a LogicalExpression\");\r\n            assert.ok((<Expr.ILogicalExpression>expr).operator == Expr.LogicalOperatorType.Greater, \"Expected a binary operation of greather than\");\r\n        });\r\n\r\n        it(\"it should handle logical operation for greater or equal than\", () => {\r\n            expr = visitor.visitLambda(() => 5 >= 2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Logical, \"Expected a LogicalExpression\");\r\n            assert.ok((<Expr.ILogicalExpression>expr).operator == Expr.LogicalOperatorType.GreaterOrEqual, \"Expected a binary operation of greater or equal than\");\r\n        });\r\n\r\n        it(\"it should handle logical operation for lesser\", () => {\r\n            expr = visitor.visitLambda(() => 5 < 2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Logical, \"Expected a LogicalExpression\");\r\n            assert.ok((<Expr.ILogicalExpression>expr).operator == Expr.LogicalOperatorType.Lesser, \"Expected a binary operation of lesser\");\r\n        });\r\n\r\n        it(\"it should handle logical operation for or\", () => {\r\n            expr = visitor.visitLambda(() => 5 <= 2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Logical, \"Expected a LogicalExpression\");\r\n            assert.ok((<Expr.ILogicalExpression>expr).operator == Expr.LogicalOperatorType.LesserOrEqual, \"Expected a binary operation of lesser or equal than\");\r\n        });\r\n    })\r\n});\r\n"]}