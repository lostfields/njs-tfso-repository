{"version":3,"file":"templateliteralvisitor.js","sourceRoot":"","sources":["../../src/test/templateliteralvisitor.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AACjC,gEAAgE;AAChE,yFAAsF;AAEtF,QAAQ,CAAC,kDAAkD,EAAE;IACzD,IAAI,QAAgC,EAChC,IAAI,GAAG,EAAE,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAA;IAEzD,UAAU,CAAC;QACP,QAAQ,GAAG,IAAI,+CAAsB,EAAE,CAAC;IAC5C,CAAC,CAAC,CAAA;IAEF,IAAI,MAAM,GAAG,CAAC,CAAC;IAEf,EAAE,CAAC,yCAAyC,EAAE;QAC1C,IAAI,OAAO,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,gBAAgB,IAAI,CAAC,MAAM,mBAAmB,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EACrG,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAE5C,IAAI,UAAU,GAAG,IAAI,+CAAsB,EAAE,CAAC,WAAW,CAAC,MAAM,wBAAwB,CAAC,GAAG,MAAM,OAAO,CAAC,GAAC,CAAC,eAAe,CAAC,CAAC;QAE7H,IAAI,GAAG,GAAG,+CAAsB,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAA;QAEzE,2EAA2E;QAC3E,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,oBAAoB,CAAC,CAAC;QAC1E,MAAM,CAAC,EAAE,CAA2B,IAAK,CAAC,KAAK,IAAI,iCAAiC,CAAC,CAAC;IAC1F,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAA","sourcesContent":["import * as assert from 'assert';\nimport * as Expr from './../linq/expressions/expressionvisitor';\nimport { TemplateLiteralVisitor } from './../linq/expressions/templateliteralvisitor';\n\ndescribe(\"When using TemplateLiteral for ExpressionVisitor\", () => {\n    var template: TemplateLiteralVisitor,\n        vars = { number: 5, array: [8, 7, 6, 5, 4, 3, 2, 1] }\n\n    beforeEach(() => {\n        template = new TemplateLiteralVisitor();\n    })\n\n    var number = 5;\n\n    it(\"should handle a simple template literal\", () => {\n        let reduced = template.visitLambda(() => `My number is ${this.number} and my next is ${this.number + 1}`),\n            expr = template.evaluate(reduced, vars);\n\n        var expression = new TemplateLiteralVisitor().visitLambda(() => `template string adds ${2 + number} to ${2+5} like nothing`);\n\n        let val = TemplateLiteralVisitor.evaluate(expression, { number: number })\n\n        //assert.ok(template.isSolvable == true, \"Expected a solvable expression\");\n        assert.ok(expr.type == Expr.ExpressionType.Literal, \"Expected a literal\");\n        assert.ok((<Expr.ILiteralExpression>expr).value == 'My number is 5 and my next is 6');\n    })\n})"]}