{"version":3,"file":"odatavisitor.js","sourceRoot":"","sources":["../../src/test/odatavisitor.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AACjC,gEAAgE;AAChE,qEAAkE;AAElE,QAAQ,CAAC,wCAAwC,EAAE;IAC/C,IAAI,OAAqB,EACrB,IAAsB,CAAC;IAE3B,UAAU,CAAC;QACP,OAAO,GAAG,IAAI,2BAAY,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,2DAA2D,EAAE;QAC5D,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QAErC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACrD,MAAM,CAAC,KAAK,CAA0B,IAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,0EAA0E,EAAE;QAC3E,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;QAE1C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACrD,MAAM,CAAC,KAAK,CAA0B,IAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,mGAAmG,EAAE;QACpG,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC;QAElD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACrD,MAAM,CAAC,KAAK,CAA0B,IAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,kGAAkG,EAAE;QACnG,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC;QAElD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACrD,MAAM,CAAC,KAAK,CAA0B,IAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,oGAAoG,EAAE;QACrG,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,wBAAwB,CAAC,CAAC;QAEpD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACrD,MAAM,CAAC,KAAK,CAA0B,IAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,iGAAiG,EAAE;QAClG,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC;QAEjD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACrD,MAAM,CAAC,KAAK,CAA0B,IAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAA","sourcesContent":["import * as assert from 'assert';\nimport * as Expr from './../linq/expressions/expressionvisitor';\nimport { ODataVisitor } from './../linq/expressions/odatavisitor';\n\ndescribe(\"When using OData for ExpressionVisitor\", () => {\n    var reducer: ODataVisitor,\n        expr: Expr.IExpression;\n\n    beforeEach(() => {\n        reducer = new ODataVisitor({ number: 5, string: 'abc', decimal: 5.50 });\n    })\n\n    it(\"should evaluate a simple expression with binary operation\", () => {\n        expr = reducer.visitOData(\"2 add 3\");\n\n        assert.equal(expr.type, Expr.ExpressionType.Literal);\n        assert.equal((<Expr.LiteralExpression>expr).value, 5);\n    })\n\n    it(\"should evaluate a simple expression with binary operation and identifier\", () => {\n        expr = reducer.visitOData(\"2 add number\");\n\n        assert.equal(expr.type, Expr.ExpressionType.Literal);\n        assert.equal((<Expr.LiteralExpression>expr).value, 7);\n    })\n\n    it(\"should evaluate a expression with binary operation and method 'length' with Identifier Expression\", () => {\n        expr = reducer.visitOData(\"2 add length(string)\");\n\n        assert.equal(expr.type, Expr.ExpressionType.Literal);\n        assert.equal((<Expr.LiteralExpression>expr).value, 5);\n    })\n\n    it(\"should evaluate a expression with binary operation and method 'floor' with Identifier Expression\", () => {\n        expr = reducer.visitOData(\"2 add floor(decimal)\");\n\n        assert.equal(expr.type, Expr.ExpressionType.Literal);\n        assert.equal((<Expr.LiteralExpression>expr).value, 7);\n    })\n\n    it(\"should evaluate a expression with binary operation and method 'ceiling' with Identifier Expression\", () => {\n        expr = reducer.visitOData(\"2 add ceiling(decimal)\");\n\n        assert.equal(expr.type, Expr.ExpressionType.Literal);\n        assert.equal((<Expr.LiteralExpression>expr).value, 8);\n    })\n\n    it(\"should evaluate a expression with binary operation and method 'ceiling' with Literal Expression\", () => {\n        expr = reducer.visitOData(\"2 add ceiling(5.50)\");\n\n        assert.equal(expr.type, Expr.ExpressionType.Literal);\n        assert.equal((<Expr.LiteralExpression>expr).value, 8);\n    })\n})"]}