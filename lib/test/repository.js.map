{"version":3,"file":"repository.js","sourceRoot":"","sources":["../../src/test/repository.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from 'assert';\n\nimport Repository, { IRecordSetMeta } from './../repository/baserepository';\nimport Enumerable, { IEnumerable, OperatorType } from './../linq/enumerable';\nimport { WhereOperator } from './../linq/operators/whereoperator';\nimport { SkipOperator } from './../linq/operators/skipoperator';\nimport { TakeOperator } from './../linq/operators/takeoperator';\n\n\nimport { ExpressionType, IExpression, IIdentifierExpression, ILiteralExpression } from './../linq/expressions/expression';\nimport { LogicalOperatorType } from './../linq/expressions/logicalexpression';\n\ninterface ICar {\n    id: number\n    location: string\n\n    optional?: string\n\n    registrationYear: number\n\n    type: {\n        make: string\n        model: string\n    }\n}\n\ninterface ILocation {\n    location: string\n    zipcode: number\n    ziparea: string\n}\n\nclass CarRepository extends Repository<ICar, number>\n{\n    public read(id: number): Promise<ICar> {\n        return new Enumerable(this).where( (it, id) => it.id == id, id).firstAsync();\n    }\n\n    public readAll(query: IEnumerable<ICar>, meta?: IRecordSetMeta): Promise<ICar[]> {\n         let specialcar: ICar,\n             cars = [\n                <ICar>{ id: 1, location: 'SKIEN', registrationYear: 2016, type: { make: 'SAAB', model: '9-3' } },\n                <ICar>{ id: 2, location: 'PORSGRUNN', registrationYear: 2010, type: { make: 'NISSAN', model: 'QASHQAI' } },\n                <ICar>{ id: 3, location: 'PORSGRUNN', registrationYear: 2005, type: { make: 'SAAB', model: '9-3' } },\n                <ICar>{ id: 4, location: 'LANGESUND', registrationYear: 2004, type: { make: 'NISSAN', model: 'LEAF' } },\n                <ICar>{ id: 5, location: 'BREVIK', registrationYear: 2009, type: { make: 'TOYOTA', model: 'COROLLA' } },\n                <ICar>{ id: 6, location: 'BREVIK', registrationYear: 2014, type: { make: 'HONDA', model: 'HRV' } },\n                specialcar = <ICar>{ id: 7, location: 'HEISTAD', registrationYear: 2013, type: { make: 'TOYOTA', model: 'YARIS' } },\n                <ICar>{ id: 8, location: 'LARVIK', registrationYear: 2009, type: { make: 'HONDA', model: 'CIVIC' } }\n            ];\n\n        for (let criteria of this.getCriteria(query)) {\n             switch (criteria.property) {\n                 case 'id':\n                     if (criteria.operator == '==' && criteria.value == 7) {\n                         if (meta) {\n                             meta.totalLength = 1;\n                         }\n\n                         return Promise.resolve([specialcar]); // optimized\n                     }\n\n                     break;\n             }\n        }\n\n        let skip = query.operations.first(SkipOperator);\n        if (skip) {\n            query.operations.remove(skip); // removing it as we are doing this part at database level instead\n        }\n\n        let take = query.operations.first(TakeOperator);\n        if (take) {\n            query.operations.remove(take); // removing it as we are doing this part at database level instead\n        }\n\n        let where = query.operations.first(WhereOperator);\n        if (where) cars = cars.filter(where.predicate);\n\n        if (skip) cars = cars.slice(skip.count); // simulating paging at database level\n        if (take) cars = cars.slice(0, take.count); // simulating paging at database level\n\n        return Promise.resolve(cars); // unoptimized\n    }\n\n    public async create(car: ICar): Promise<ICar> {\n        throw new Error('Not implemented');\n    }\n\n    public async update(car: ICar): Promise<boolean> {\n        throw new Error('Not implemented');\n    }\n\n    public async delete(car: ICar): Promise<boolean> {\n        throw new Error('Not implemented');\n    }\n\n    public exposeIfQueryIsPageable(query: IEnumerable<ICar>): boolean {\n        return super.isQueryPageable(query);\n    }\n\n    public exposeCriteriaCount(query: IEnumerable<ICar>): number {\n        return super.getCriteria(query).length;\n    }\n}\n\nclass LocationRepository extends Repository<ILocation, string>\n{\n    public read(id: string): Promise<ILocation> {\n        return new Enumerable(this).where((it, id) => it.location == id, id).firstAsync();\n    }\n\n    public readAll(query: IEnumerable<ILocation>, meta?: IRecordSetMeta, parent?) {\n        let locations = [\n            <ILocation>{ location: 'SKIEN', zipcode: 3955, ziparea: 'Skien' },\n            <ILocation>{ location: 'PORSGRUNN', zipcode: 3949, ziparea: 'Porsgrunn' },\n            <ILocation>{ location: 'LANGESUND', zipcode: 3970, ziparea: 'Langesund' },\n            <ILocation>{ location: 'HEISTAD', zipcode: 3943, ziparea: 'Porsgrunn' },\n            <ILocation>{ location: 'BREVIK', zipcode: 3940, ziparea: 'Porsgrunn' }\n        ]\n\n        return Promise.resolve(locations);\n    }\n\n    public async create(car: ILocation): Promise<ILocation> {\n        throw new Error('Not implemented');\n    }\n\n    public async update(car: ILocation): Promise<boolean> {\n        throw new Error('Not implemented');\n    }\n\n    public async delete(car: ILocation): Promise<boolean> {\n        throw new Error('Not implemented');\n    }\n}\n\ndescribe(\"When using Repository\", () => {\n    beforeEach(() => {\n\n    })\n\n    it(\"should work with joins\", async () => {\n        let meta: IRecordSetMeta = <IRecordSetMeta>{},\n            ar = new Enumerable(new CarRepository().getIterable(meta))\n                .where(it => it.id == 7)\n                .take(5)\n                .join<ILocation, any>(new LocationRepository(), a => a.location, b => b.location, (a, b) => Object.assign({}, a), true)\n\n        let t = await ar.toArrayAsync();\n\n        assert.equal(t.length, 1);\n        assert.equal(meta.totalLength, 1);\n    })\n\n    it(\"should work with optimized query\", async () => {\n\n        let repo = new CarRepository(),\n            cars = await new Enumerable<ICar>(repo).where(it => it.id == 7).toArrayAsync();\n\n        assert.ok(repo instanceof Repository);\n        assert.equal(cars.length, 1)\n        assert.equal(cars[0].id, 7);\n    })\n\n    it(\"should work with random query\", async () => {\n\n        let repo = new CarRepository(),\n            cars = await new Enumerable<ICar>(repo).where(it => it.id == 6).toArrayAsync();\n\n        assert.ok(repo instanceof Repository);\n        assert.equal(cars.length, 1)\n        assert.equal(cars[0].id, 6);\n    })\n\n    it(\"should work with random query using input param\", async () => {\n\n        let repo = new CarRepository(),\n            cars = await new Enumerable<ICar>(repo).where((it, id) => it.id == id, 6).toArrayAsync();\n\n        assert.ok(repo instanceof Repository);\n        assert.equal(cars.length, 1)\n        assert.equal(cars[0].id, 6);\n    })\n\n    it(\"should be able to remove paging operations for manual handling\", async () => {\n\n        let repo = new CarRepository(),\n            cars: Array<ICar>;\n\n        cars = await new Enumerable(repo)\n            .where(it => it.registrationYear >= 2005)\n            .skip(5)\n            .take(3)\n            .toArrayAsync();\n\n        assert.equal(cars.length, 2);\n        assert.equal(cars[0].id, 7);\n\n    })\n\n    it(\"should be able to see that a query can't be pageable after plucking union expressions\", async () => {\n        let repo = new CarRepository(),\n            query = new Enumerable<ICar>(repo).where(it => (it.registrationYear == 2017 || it.location == 'NO') && it.id >= 7);\n\n        assert.equal(repo.exposeIfQueryIsPageable(query), false)\n    })\n\n    it(\"should be able to see that a query can be pageable after plucking union expressions\", async () => {\n        let repo = new CarRepository(),\n            query = new Enumerable<ICar>(repo).where(it => it.location == 'NO' && it.registrationYear >= 2000);\n\n        assert.equal(repo.exposeIfQueryIsPageable(query), true)\n    })\n\n    it(\"should be able to see that a query can be pageable after plucking union expressions that is common\", async () => {\n        let repo = new CarRepository(),\n            query = new Enumerable<ICar>(repo).where(it => (it.location == 'NO') || (it.registrationYear >= 2000 && it.location == 'NO'));\n\n        assert.equal(repo.exposeCriteriaCount(query), 1);\n        assert.equal(repo.exposeIfQueryIsPageable(query), false)\n    })\n})"]}