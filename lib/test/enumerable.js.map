{"version":3,"file":"enumerable.js","sourceRoot":"","sources":["../../src/test/enumerable.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from 'assert';\r\nimport Enumerable, { IEnumerable, OperatorType } from './../linq/enumerable';\r\nimport { SkipOperator } from './../linq/operators/skipoperator';\r\nimport { WhereOperator } from './../linq/operators/whereoperator';\r\n\r\ninterface ICar {\r\n\r\n    id: number\r\n    location: string\r\n\r\n    registrationYear: number\r\n\r\n    type: {\r\n        make: string\r\n        model: string\r\n    }\r\n}\r\n\r\ndescribe(\"When using Enumerable\", () => {\r\n    var list: Array<ICar>;\r\n\r\n    beforeEach(() => {\r\n        list = [\r\n            <ICar>{ id: 1, location: 'SKIEN', registrationYear: 2016, type: { make: 'SAAB', model: '9-3' } },\r\n            <ICar>{ id: 2, location: 'PORSGRUNN', registrationYear: 2010, type: { make: 'NISSAN', model: 'QASHQAI' } },\r\n            <ICar>{ id: 3, location: 'PORSGRUNN', registrationYear: 2005, type: { make: 'SAAB', model: '9-3' } },\r\n            <ICar>{ id: 4, location: 'LANGESUND', registrationYear: 2004, type: { make: 'NISSAN', model: 'LEAF' } },\r\n            <ICar>{ id: 5, location: 'BREVIK', registrationYear: 2009, type: { make: 'TOYOTA', model: 'COROLLA' } },\r\n            <ICar>{ id: 6, location: 'BREVIK', registrationYear: 2014, type: { make: 'HONDA', model: 'HRV' } },\r\n            <ICar>{ id: 7, location: 'HEISTAD', registrationYear: 2013, type: { make: 'TOYOTA', model: 'YARIS' } },\r\n            <ICar>{ id: 8, location: 'LARVIK', registrationYear: 2009, type: { make: 'HONDA', model: 'CIVIC' } }\r\n        ];        \r\n    })\r\n\r\n    describe(\"with Lambda query\", () => {\r\n\r\n        it(\"should be able to do a simple query\", () => {\r\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n            query.where(it => it.location == 'BREVIK');\r\n            query.skip(1);\r\n            query.take(3);\r\n\r\n            let result = query.toArray(list);\r\n\r\n            assert.equal(result.length, 1);\r\n        })\r\n\r\n        it(\"should be able to do a simple query using one named parameters\", () => {\r\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n            query.where((it, loc) => it.location == loc, 'BREVIK');\r\n            query.skip(1);\r\n            query.take(3);\r\n\r\n            let result = query.toArray(list);\r\n\r\n            assert.equal(result.length, 1);\r\n        })\r\n\r\n        it(\"should be able to do a simple query using two named parameters\", () => {\r\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n            query.where((it, loc, year) => it.location == loc && it.registrationYear >= year, 'BREVIK', 2010);\r\n\r\n            let result = query.toArray(list);\r\n\r\n            assert.equal(result.length, 1);\r\n        })\r\n\r\n        it(\"should be able to do a simple query with a nested model\", () => {\r\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n            query.where(it => it.type.make == 'TOYOTA');\r\n\r\n            let result = query.toArray(list);\r\n\r\n            assert.equal(result.length, 2);\r\n        })\r\n    })\r\n\r\n    describe(\"with OData query\", () => {\r\n\r\n        it(\"should be able to do a simple query\", () => {\r\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n            query.where(\"location eq 'BREVIK'\");\r\n            query.skip(1);\r\n            query.take(3);\r\n\r\n            let result = query.toArray(list);\r\n\r\n            assert.equal(result.length, 1);\r\n        })\r\n\r\n        it(\"should be able to do a simple query with a nested model\", () => {\r\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n            query.where(\"type/make eq 'TOYOTA'\");\r\n\r\n            let result = query.toArray(list);\r\n            assert.equal(result.length, 2);\r\n        })\r\n\r\n        it(\"should be able to rename a flat model\", () => {\r\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n            query.where(\"tolower(Place) eq 'brevik'\");\r\n            query.rename({ from: 'Place', to: 'location' })\r\n\r\n            let result = query.toArray(list);\r\n            assert.equal(result.length, 2);\r\n\r\n            let where = query.operations.first(WhereOperator);\r\n        })\r\n\r\n        it(\"should be able to rename a nested model\", () => {\r\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n            query.where(\"tolower(car/make) eq 'toyota'\");\r\n\r\n            //query.rename(<any>{ car: { make: 'type.make',  } });\r\n\r\n            query.rename({ from: 'car.make', to: 'type.make' })\r\n\r\n            let result = query.toArray(list);\r\n            assert.equal(result.length, 2);\r\n\r\n            let where = query.operations.first(WhereOperator);\r\n        })\r\n    })\r\n\r\n    it(\"should take top 1\", () => {\r\n        var ar = new Enumerable(list).take(1).toArray();\r\n\r\n        assert.ok(ar.length == 1);\r\n    });\r\n\r\n    it(\"should skip 5\", () => {\r\n        var ar = new Enumerable(list).skip(5).toArray();\r\n\r\n        assert.ok(ar[0].id == 6);\r\n    });\r\n\r\n    it(\"should skip 5 and take 3\", () => {\r\n        var ar = new Enumerable(list).skip(5).take(3).toArray();\r\n\r\n        assert.ok(ar.length == 3);\r\n        assert.ok(ar[0].id == 6);\r\n    });\r\n\r\n    it(\"should order by a property\", () => {\r\n        var ar = new Enumerable(list).orderBy(it => it.location).toArray();\r\n        \r\n        assert.deepEqual(ar.map(item => item.location), [\"BREVIK\", \"BREVIK\", \"HEISTAD\", \"LANGESUND\", \"LARVIK\", \"PORSGRUNN\", \"PORSGRUNN\", \"SKIEN\"]);\r\n    })\r\n\r\n    it(\"should be able to iterate\", () => {\r\n        var ar = new Enumerable(list).take(3);\r\n\r\n        assert.equal(Array.from(ar).length, 3);\r\n    })\r\n\r\n    it(\"should just work\", () => {\r\n        let query: IEnumerable<ICar> = new Enumerable<ICar>();\r\n\r\n        query.skip(5)\r\n        query.take(3);\r\n        \r\n        var ar = query.toArray(list);\r\n\r\n        assert.ok(ar.length == 3);\r\n        assert.ok(ar[0].id == 6);\r\n    })\r\n\r\n    it(\"should be able to get first element\", () => {\r\n        var el = new Enumerable(list).orderBy(it => it.location).first();\r\n\r\n        assert.equal(el.id, 5);\r\n    })\r\n\r\n    it(\"should iterate through operations\", () => {\r\n        let query: IEnumerable<ICar> = new Enumerable<ICar>();\r\n\r\n        query.skip(5);\r\n        query.take(3);\r\n\r\n\r\n        var operations = (<Enumerable<ICar>>query).operations.values();\r\n\r\n        var count = 0;\r\n        for (let operator of operations) {\r\n            if (operator) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        assert.equal(count, 2);\r\n    })\r\n\r\n    it(\"should be able to get first Operator by class\", () => {\r\n        let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n        query.where(it => it.location == 'BREVIK');\r\n        query.skip(5);\r\n        query.take(3);\r\n        query.skip(1);\r\n        query.take(1);\r\n\r\n        let op = query.operations.first(SkipOperator);\r\n\r\n        assert.notEqual(op, null);\r\n        assert.equal(op.type, OperatorType.Skip);\r\n        assert.equal(op.count, 5);\r\n    })\r\n\r\n    it(\"should be able to get first Operator by type\", () => {\r\n        let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n        query.where(it => it.location == 'BREVIK');\r\n        query.skip(5);\r\n        query.take(3);\r\n        query.skip(1);\r\n        query.take(1);\r\n\r\n        let op = query.operations.first(OperatorType.Skip);\r\n\r\n        assert.notEqual(op, null);\r\n        assert.equal(op.type, OperatorType.Skip);\r\n        assert.equal((<SkipOperator<ICar>>op).count, 5);\r\n    })\r\n\r\n    it(\"should be able to get first Operator by class and remove it for manual operator handling\", () => {\r\n        let query: Enumerable<ICar> = new Enumerable<ICar>(),\r\n            skip: SkipOperator<ICar>,\r\n            skipCount: number;\r\n\r\n        query.where(it => it.location == 'BREVIK');\r\n        query.skip(5);\r\n        query.take(3);\r\n        query.skip(1);\r\n        query.take(1);\r\n\r\n        skip = query.operations.first(SkipOperator);\r\n        skipCount = skip.count;\r\n\r\n        assert.notEqual(skip, null);\r\n        assert.equal(skip.type, OperatorType.Skip);\r\n        assert.equal(skip.count, 5);\r\n\r\n        query.operations.remove(skip);\r\n\r\n        skip = query.operations.first(SkipOperator);\r\n\r\n        assert.notEqual(skip, null);\r\n        assert.equal(skip.type, OperatorType.Skip);\r\n        assert.equal(skip.count, 1);\r\n    })\r\n});\r\n"]}