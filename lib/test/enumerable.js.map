{"version":3,"file":"enumerable.js","sourceRoot":"","sources":["../../src/test/enumerable.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,iCAAiC;AACjC,qDAA6E;AAC7E,mEAAgE;AAChE,qEAAkE;AA6BlE,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACnC,IAAI,IAAiB,EACjB,SAA2B,CAAC;IAEhC,UAAU,CAAC,GAAG,EAAE;QACZ,IAAI,GAAG;YACG,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE;YAC1F,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,gBAAgB,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE;YACrH,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE;YAC9F,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,gBAAgB,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE;YAClH,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE;YAClH,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE;YAC7G,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE;YAChG,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE;SACvG,CAAC;QAEF,SAAS,GAAG;YACG,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE;YACtD,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE;YAC9D,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE;YAC9D,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE;YAC5D,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE;SACzE,CAAA;IACL,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAE3B,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;YACvC,IAAI,KAAK,GAAG,CAAC,CAAC;YAEd,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,IAAI,oBAAU,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3D,KAAK,EAAE,CAAC;YACZ,CAAC;YAED,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAA;IAEN,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACjC,IAAI,KAA8B,EAC9B,IAAuC,CAAC;QAE5C,UAAU,CAAC,GAAG,EAAE;YAEZ,KAAK,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;YAC9E,IAAI,GAAG;;oBACH,MAAY,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,CAAA;oBACtG,MAAY,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,gBAAgB,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,CAAA;oBAEjI,cAAM,KAAK,CAAC,EAAE,CAAC,CAAA,CAAA;oBAEf,MAAY,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,CAAA;oBAC1G,MAAY,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,gBAAgB,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,CAAA;oBAC9H,MAAM,OAAO,CAAC,OAAO,CAAO,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,CAAC,CAAA;oBAC/I,MAAY,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,CAAA;oBACzH,MAAM,OAAO,CAAC,OAAO,CAAO,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,CAAC,CAAA;oBAC7H,MAAY,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,CAAA;gBAC9G,CAAC;aAAA,CAAA;QACL,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;YACvC,IAAI,KAAK,GAAG,CAAC,CAAC;;gBAEd,GAAG,CAAC,CAAmB,IAAA,KAAA,cAAA,IAAI,oBAAU,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAA,IAAA;oBAAzD,IAAI,IAAI,iBAAA,CAAA;oBACf,KAAK,EAAE,CAAC;iBACX;;;;;;;;;YAED,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;;QAC3B,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACpD,IAAI,QAAQ,GAAG,KAAK,CAAC;;gBAErB,GAAG,CAAC,CAAkB,IAAA,KAAA,cAAA,IAAI,oBAAU,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAA,IAAA;oBAA1D,IAAI,IAAI,iBAAA,CAAA;oBACd,QAAQ,GAAG,IAAI,CAAC;oBAChB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBAC5B;;;;;;;;;YAED,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;;QACxB,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACvD,IAAI,QAAQ,GAAG,KAAK,CAAC;;gBAErB,GAAG,CAAC,CAAkB,IAAA,KAAA,cAAA,IAAI,oBAAU,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAA,IAAA;oBAA1D,IAAI,IAAI,iBAAA,CAAA;oBACd,QAAQ,GAAG,IAAI,CAAC;oBAChB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBAC5B;;;;;;;;;YAED,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;;QACxB,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE;YACZ,IAAI,OAAO,GAAG,QAAQ,CAAC;gBACnB,MAAM,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,YAAY,EAAG,IAAI,EAAE,IAAI,EAAE,CAAA;gBAC/C,MAAM,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,CAAA;gBAC1C,MAAM,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,cAAc,EAAE,IAAI,EAAE,IAAI,EAAE,CAAA;YACpD,CAAC,CAAA;YAED,IAAI,MAAM,GAAG,QAAQ,CAAC;gBAClB,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAA;gBAC5C,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAA;gBAC9C,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,CAAA;gBAC7C,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,CAAA;gBAC/C,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAA;YAClD,CAAC,CAAA;YAED,IAAI,MAAM,GAAG,IAAI,oBAAU,CAAM,OAAO,EAAE,CAAC;iBACtC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;iBACvB,IAAI,CACD,IAAI,oBAAU,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAK,EAAE,MAAM,EAAE,EAAE,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,CAAA,CAAC,EAChF,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EACT,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,EACb,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC,OAAO,EAAE,EAAE,CAAE,CAC3D;iBACA,KAAK,EAAE,CAAC;YAEb,qIAAqI;QACzI,CAAC,CAAC,CAAA;IACN,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAExB,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACvC,IAAI,GAAG,GAAG,IAAI,oBAAU,CAAO,IAAI,CAAC;iBAC/B,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;iBACvB,IAAI,CAAiB,IAAI,oBAAU,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAK,EAAE,QAAQ,EAAE,EAAE,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,CAAC,OAAO,EAAE,CAAA,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;iBAC3L,KAAK,EAAE,CAAC;YAEb,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC;YACvB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QACxC,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;YAE5D,IAAI,MAAM,GAAG,IAAI,oBAAU,CAAY,SAAS,CAAC;iBAC5C,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,IAAI,WAAW,CAAC,CAAA;YAE3C,IAAI,IAAI,GAAG,IAAI,oBAAU,CAAO,IAAI,CAAC;iBAChC,IAAI,CAAiB,MAAM,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC;iBACvG,OAAO,EAAE,CAAC;YAEf,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAA;IACN,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAE/B,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC3C,IAAI,KAAK,GAAqB,IAAI,oBAAU,EAAQ,CAAC;YAErD,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,IAAI,QAAQ,CAAC,CAAC;YAC3C,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACd,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAEd,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAEjC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAC7D,IAAI,KAAK,GAAqB,IAAI,oBAAU,EAAQ,EAChD,OAAO,CAAC;YAEZ,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,IAAI,QAAQ,IAAI,OAAO,IAAI,IAAI,CAAC,CAAC;YAE9D,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAEjC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;YACtE,IAAI,KAAK,GAAqB,IAAI,oBAAU,EAAQ,CAAC;YAErD,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,QAAQ,IAAI,GAAG,EAAE,QAAQ,CAAC,CAAC;YACvD,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACd,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAEd,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAEjC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;YACtE,IAAI,KAAK,GAAqB,IAAI,oBAAU,EAAQ,CAAC;YAErD,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,QAAQ,IAAI,GAAG,IAAI,EAAE,CAAC,gBAAgB,IAAI,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;YAElG,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAEjC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;YAC/D,IAAI,KAAK,GAAqB,IAAI,oBAAU,EAAQ,CAAC;YAErD,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC,CAAC;YAE5C,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAEjC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAA;IACN,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAE9B,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC3C,IAAI,KAAK,GAAqB,IAAI,oBAAU,EAAQ,CAAC;YAErD,KAAK,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;YACpC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACd,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAEd,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAEjC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAC7D,IAAI,KAAK,GAAqB,IAAI,oBAAU,EAAQ,CAAC;YAErD,KAAK,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAC;YAEvD,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAEjC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAE5C,IAAI,MAAM,GAAG,IAAI,oBAAU,CAAO,IAAI,CAAC;iBAClC,KAAK,CAAC,uEAAuE,CAAC;iBAC9E,OAAO,EAAE,CAAC;YAEf,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,kEAAkE,EAAE,GAAG,EAAE;YACxE,IAAI,MAAM,GAAG,IAAI,oBAAU,CAAO,IAAI,CAAC;iBAClC,KAAK,CAAC,+EAA+E,CAAC;iBACtF,OAAO,EAAE,CAAC;YAEf,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;YAC/D,IAAI,KAAK,GAAqB,IAAI,oBAAU,EAAQ,CAAC;YAErD,KAAK,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;YAErC,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC7C,IAAI,KAAK,GAAqB,IAAI,oBAAU,EAAQ,CAAC;YAErD,KAAK,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;YAC1C,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,EAAE;gBACjB,EAAE,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC;oBAAC,MAAM,CAAC,UAAU,CAAC;YAC3C,CAAC,CAAC,CAAA;YAEF,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAE/B,IAAI,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,6BAAa,CAAC,CAAC;QACtD,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YACxD,IAAI,KAAK,GAAqB,IAAI,oBAAU,EAAQ,CAAC;YAErD,KAAK,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;YAC7C,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;gBACxB,EAAE,CAAC,CAAC,IAAI,IAAI,UAAU,CAAC;oBAAC,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;YACvD,CAAC,CAAC,CAAA;YAEF,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAE/B,IAAI,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,6BAAa,CAAC,CAAC;QACtD,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YAC/C,IAAI,KAAK,GAAqB,IAAI,oBAAU,EAAQ,CAAC;YAErD,KAAK,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;YAC7C,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,EAAE;gBACjB,EAAE,CAAC,CAAC,IAAI,IAAI,UAAU,CAAC;oBAAC,MAAM,CAAC,WAAW,CAAC;YAC/C,CAAC,CAAC,CAAC;YAEH,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAE/B,IAAI,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,6BAAa,CAAC,CAAC;QACtD,CAAC,CAAC,CAAA;IACN,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACzB,IAAI,EAAE,GAAG,IAAI,oBAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QAEhD,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,eAAe,EAAE,GAAG,EAAE;QACrB,IAAI,EAAE,GAAG,IAAI,oBAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QAEhD,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAC1B,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;QACvB,IAAI,EAAE,GAAG,IAAI,oBAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC;QAEvE,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAC1B,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,eAAe,EAAE,GAAG,EAAE;QACrB,IAAI,EAAE,GAAG,IAAI,oBAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QAEhD,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAChC,IAAI,EAAE,GAAG,IAAI,oBAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QAExD,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;QAC1B,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACnD,IAAI,EAAE,GAAG,IAAI,oBAAU,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,gBAAgB,IAAI,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC;QAErF,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;QAC1B,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAClC,IAAI,EAAE,GAAG,IAAI,oBAAU,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,CAAC;QAEnE,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,QAAQ,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC,CAAC;IAC/I,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC3C,IAAI,EAAE,GAAG,IAAI,oBAAU,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,CAAC;QAEjE,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAC9B,IAAI,EAAE,GAAG,IAAI,oBAAU,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QAEpD,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;QAC1B,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACtD,IAAI,EAAE,GAAG,IAAI,oBAAU,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;QAEtD,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACjC,IAAI,UAAU,GAAG,IAAI,oBAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EACzC,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAEhC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QACxB,IAAI,KAAK,GAAsB,IAAI,oBAAU,EAAQ,CAAC;QAEtD,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACb,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAEd,IAAI,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAE7B,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;QAC1B,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;QACzC,IAAI,KAAK,GAAsB,IAAI,oBAAU,EAAQ,CAAC;QAEtD,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACd,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAGd,IAAI,UAAU,GAAsB,KAAM,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;QAE/D,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,UAAU,CAAC,CAAC,CAAC;YAC9B,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,KAAK,EAAE,CAAC;YACZ,CAAC;QACL,CAAC;QAED,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACtD,IAAI,GAAG,GAAG,IAAI,oBAAU,CAAC,IAAI,CAAC;aACzB,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;aACvB,MAAM,CAAa,EAAE,CAAC,EAAE,CAAC,CAAY,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,CAAA,CAAC;aAC7F,KAAK,EAAE,CAAC;QAEb,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACjC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACrD,IAAI,KAAK,GAAqB,IAAI,oBAAU,EAAQ,CAAC;QAErD,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,IAAI,QAAQ,CAAC,CAAC;QAC3C,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACd,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACd,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACd,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAEd,IAAI,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,2BAAY,CAAC,CAAC;QAE9C,MAAM,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAC1B,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE,yBAAY,CAAC,IAAI,CAAC,CAAC;QACzC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACpD,IAAI,KAAK,GAAqB,IAAI,oBAAU,EAAQ,CAAC;QAErD,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,IAAI,QAAQ,CAAC,CAAC;QAC3C,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACd,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACd,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACd,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAEd,IAAI,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,yBAAY,CAAC,IAAI,CAAC,CAAC;QAEnD,MAAM,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAC1B,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE,yBAAY,CAAC,IAAI,CAAC,CAAC;QACzC,MAAM,CAAC,KAAK,CAAsB,EAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,0FAA0F,EAAE,GAAG,EAAE;QAChG,IAAI,KAAK,GAAqB,IAAI,oBAAU,CAAO,IAAI,CAAC,EACpD,IAAwB,EACxB,SAAiB,CAAC;QAEtB,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,gBAAgB,IAAI,IAAI,CAAC,CAAC;QAC/C,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACd,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACd,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACd,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAEd,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAE9D,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,2BAAY,CAAC,CAAC;QAE5C,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC5B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,yBAAY,CAAC,IAAI,CAAC,CAAC;QAC3C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAE5B,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAE9B,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,2BAAY,CAAC,CAAC;QAE5C,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC5B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,yBAAY,CAAC,IAAI,CAAC,CAAC;QAC3C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAE5B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAE9D,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;QAE7B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAC","sourcesContent":["import * as assert from 'assert';\nimport Enumerable, { IEnumerable, OperatorType } from './../linq/enumerable';\nimport { SkipOperator } from './../linq/operators/skipoperator';\nimport { WhereOperator } from './../linq/operators/whereoperator';\n\ninterface ICar {\n\n    id: number\n    location: string\n\n    optional?: string\n\n    registrationYear: number\n\n    type: {\n        make: string\n        model: string\n    }\n}\n\ninterface ISimpleCar {\n    id: number\n    make: string\n    model: string\n}\n\ninterface ILocation {\n    location: string\n    zipcode: number\n    ziparea: string\n}\n\ndescribe(\"When using Enumerable\", () => {\n    var cars: Array<ICar>,\n        locations: Array<ILocation>;\n\n    beforeEach(() => {\n        cars = [\n            <ICar>{ id: 1, location: 'SKIEN', registrationYear: 2016, type: { make: 'SAAB', model: '9-3' } },\n            <ICar>{ id: 2, location: 'PORSGRUNN', registrationYear: 2010, optional: 'yes', type: { make: 'NISSAN', model: 'QASHQAI' } },\n            <ICar>{ id: 3, location: 'PORSGRUNN', registrationYear: 2005, type: { make: 'SAAB', model: '9-3' } },\n            <ICar>{ id: 4, location: 'LANGESUND', registrationYear: 2004, optional: 'yes', type: { make: 'NISSAN', model: 'LEAF' } },\n            <ICar>{ id: 5, location: 'BREVIK', registrationYear: 2009, optional: 'yes', type: { make: 'TOYOTA', model: 'COROLLA' } },\n            <ICar>{ id: 6, location: 'BREVIK', registrationYear: 2014, optional: 'yes', type: { make: 'HONDA', model: 'HRV' } },\n            <ICar>{ id: 7, location: 'HEISTAD', registrationYear: 2013, type: { make: 'TOYOTA', model: 'YARIS' } },\n            <ICar>{ id: 8, location: 'LARVIK', registrationYear: 2009, type: { make: 'HONDA', model: 'CIVIC' } }\n        ];\n\n        locations = [\n            <ILocation>{ location: 'SKIEN', zipcode: 3955, ziparea: 'Skien' },\n            <ILocation>{ location: 'PORSGRUNN', zipcode: 3949, ziparea: 'Porsgrunn' },\n            <ILocation>{ location: 'LANGESUND', zipcode: 3970, ziparea: 'Langesund' },\n            <ILocation>{ location: 'HEISTAD', zipcode: 3943, ziparea: 'Porsgrunn' },\n            <ILocation>{ location: 'BREVIK', zipcode: 3940, ziparea: 'Porsgrunn' }\n        ]\n    })\n\n    describe(\"with iterable\", () => {\n\n        it(\"should be able to iterate\", async () => {\n            let count = 0;\n\n            for (let item of new Enumerable(cars).where(it => it.id > 0)) {\n                count++;\n            }\n\n            assert.equal(count, 8);\n        })\n\n    })\n\n    describe(\"with async iterable\", () => {\n        let delay: (delay: number) => void, \n            list: () => AsyncIterableIterator<ICar>;\n\n        beforeEach(() => {\n            \n            delay = (delay: number) => new Promise(resolve => setTimeout(resolve, delay));\n            list = async function* () {\n                yield <ICar>{ id: 1, location: 'SKIEN', registrationYear: 2016, type: { make: 'SAAB', model: '9-3' } }\n                yield <ICar>{ id: 2, location: 'PORSGRUNN', registrationYear: 2010, optional: 'yes', type: { make: 'NISSAN', model: 'QASHQAI' } }\n                \n                await delay(10)\n                    \n                yield <ICar>{ id: 3, location: 'PORSGRUNN', registrationYear: 2005, type: { make: 'SAAB', model: '9-3' } }\n                yield <ICar>{ id: 4, location: 'LANGESUND', registrationYear: 2004, optional: 'yes', type: { make: 'NISSAN', model: 'LEAF' } }\n                yield Promise.resolve(<ICar>{ id: 5, location: 'BREVIK', registrationYear: 2009, optional: 'yes', type: { make: 'TOYOTA', model: 'COROLLA' } })\n                yield <ICar>{ id: 6, location: 'BREVIK', registrationYear: 2014, optional: 'yes', type: { make: 'HONDA', model: 'HRV' } }\n                yield Promise.resolve(<ICar>{ id: 7, location: 'HEISTAD', registrationYear: 2013, type: { make: 'TOYOTA', model: 'YARIS' } })\n                yield <ICar>{ id: 8, location: 'LARVIK', registrationYear: 2009, type: { make: 'HONDA', model: 'CIVIC' } }\n            }\n        })\n\n        it(\"should be able to iterate\", async () => {\n            let count = 0;\n\n            for await (let item of new Enumerable(list()).where(it => it.id > 0)) {\n                count++;\n            }\n\n            assert.equal(count, 8);\n        })\n\n        it(\"should be able to handle list of items\", async () => {\n            let hasItems = false;\n\n            for await(let item of new Enumerable(list()).where(it => it.id == 3)) {\n                hasItems = true;\n                assert.equal(item.id, 3);\n            }\n\n            assert.ok(hasItems);\n        })\n\n        it(\"should be able to handle list of promises\", async () => {\n            let hasItems = false;\n\n            for await(let item of new Enumerable(list()).where(it => it.id == 5)) {\n                hasItems = true;\n                assert.equal(item.id, 5);\n            }\n\n            assert.ok(hasItems);\n        })\n\n        it(\"test\", () => {\n            let parents = function* () {\n                yield { id: 1, reg: 'Dolly Duck',  year: 1937 }\n                yield { id: 2, reg: 'Donald', year: 1934 }\n                yield { id: 3, reg: 'Skrue McDuck', year: 1947 }\n            }\n\n            let childs = function* () {\n                yield { parent: 2, name: 'Ole', year: 1940 }\n                yield { parent: 1, name: 'Hetti', year: 1953 }\n                yield { parent: 2, name: 'Dole', year: 1940 }\n                yield { parent: 2, name: 'Doffen', year: 1940 }\n                yield { parent: 1, name: 'Netti', year: 1953 }\n            }\n\n            let donald = new Enumerable<any>(parents())\n                .where(it => it.id == 2)\n                .join<any, any>(\n                    new Enumerable(childs()).select(it => <any>{ parent: it.parent, name: it.name }), \n                    a => a.id, \n                    b => b.parent, \n                    (a, b) => Object.assign({}, a, { childs: b.toArray() } )\n                )\n                .first();\n\n            // \"{\"id\":2,\"reg\":\"Donald\",\"year\":1934,\"childs\":[{\"parent\":2,\"name\":\"Ole\"},{\"parent\":2,\"name\":\"Dole\"},{\"parent\":2,\"name\":\"Doffen\"}]}\"\n        })\n    })\n\n    describe(\"with joins\", () => {\n\n        it(\"should be able to do inner join\", () => {\n            let car = new Enumerable<ICar>(cars)\n                .where(it => it.id == 2)\n                .join<ILocation, any>(new Enumerable(locations).select(it => <any>{ location: it.location, city: it.ziparea }), a => a.location, b => b.location, (a, b) => Object.assign({}, a, b.first()))\n                .first();\n\n            assert.ok(car != null);\n            assert.equal(car.id, 2);\n            assert.equal(car.city, 'Porsgrunn');\n        })\n\n        it(\"should be able to get all cars from city 'Porsgrunn'\", () => {\n\n            let cities = new Enumerable<ILocation>(locations)\n                .where(it => it.ziparea == 'Porsgrunn')\n                \n            let list = new Enumerable<ICar>(cars)\n                .join<ILocation, any>(cities, outer => outer.location, inner => inner.location, (outer, inner) => outer)\n                .toArray();\n                \n            assert.equal(list.length, 5);\n        })\n    })\n\n    describe(\"with Lambda query\", () => {\n\n        it(\"should be able to do a simple query\", () => {\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\n\n            query.where(it => it.location == 'BREVIK');\n            query.skip(1);\n            query.take(3);\n\n            let result = query.toArray(cars);\n\n            assert.equal(result.length, 1);\n        })\n\n        it(\"should return nothing when an usolvable query is used\", () => {\n            let query: Enumerable<ICar> = new Enumerable<ICar>(),\n                unknown;\n\n            query.where(it => it.location == 'BREVIK' && unknown == true);\n\n            let result = query.toArray(cars);\n\n            assert.equal(result.length, 0);\n        })\n\n        it(\"should be able to do a simple query using one named parameters\", () => {\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\n\n            query.where((it, loc) => it.location == loc, 'BREVIK');\n            query.skip(1);\n            query.take(3);\n\n            let result = query.toArray(cars);\n\n            assert.equal(result.length, 1);\n        })\n\n        it(\"should be able to do a simple query using two named parameters\", () => {\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\n\n            query.where((it, loc, year) => it.location == loc && it.registrationYear >= year, 'BREVIK', 2010);\n\n            let result = query.toArray(cars);\n\n            assert.equal(result.length, 1);\n        })\n\n        it(\"should be able to do a simple query with a nested model\", () => {\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\n\n            query.where(it => it.type.make == 'TOYOTA');\n\n            let result = query.toArray(cars);\n\n            assert.equal(result.length, 2);\n        })\n    })\n\n    describe(\"with OData query\", () => {\n\n        it(\"should be able to do a simple query\", () => {\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\n\n            query.where(\"location eq 'BREVIK'\");\n            query.skip(1);\n            query.take(3);\n\n            let result = query.toArray(cars);\n\n            assert.equal(result.length, 1);\n        })\n\n        it(\"should return nothing when an usolvable query is used\", () => {\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\n\n            query.where(\"location eq 'BREVIK' and unkown eq true\");\n           \n            let result = query.toArray(cars);\n\n            assert.equal(result.length, 0);\n        })\n\n        it(\"should be able to do a complex query\", () => {\n\n            let result = new Enumerable<ICar>(cars)\n                .where(\"((id eq 7) or (location eq 'PORSGRUNN')) and registrationYear ge 2000\")\n                .toArray();\n\n            assert.equal(result.length, 3);\n        })\n\n        it(\"should be able to do a complex query with with optional property\", () => {\n            let result = new Enumerable<ICar>(cars)\n                .where(\"((type/make eq 'TOYOTA') or (optional eq 'yes')) and registrationYear ge 2000\")\n                .toArray();\n\n            assert.equal(result.length, 5);\n        })\n\n        it(\"should be able to do a simple query with a nested model\", () => {\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\n\n            query.where(\"type/make eq 'TOYOTA'\");\n\n            let result = query.toArray(cars);\n            assert.equal(result.length, 2);\n        })\n\n        it(\"should be able to rename a flat model\", () => {\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\n\n            query.where(\"tolower(Place) eq 'brevik'\");\n            query.remap((name) => {\n                if (name == 'Place') return 'location';\n            })\n\n            let result = query.toArray(cars);\n            assert.equal(result.length, 2);\n\n            let where = query.operations.first(WhereOperator);\n        })\n\n        it(\"should be able to rename a value in a flat model\", () => {\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\n\n            query.where(\"tolower(location) eq 'BREVIK'\");\n            query.remap((name, value) => {\n                if (name == 'location') return value.toLowerCase();\n            })\n\n            let result = query.toArray(cars);\n            assert.equal(result.length, 2);\n\n            let where = query.operations.first(WhereOperator);\n        })\n\n        it(\"should be able to rename a nested model\", () => {\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\n\n            query.where(\"tolower(car/make) eq 'toyota'\");\n            query.remap((name) => {\n                if (name == 'car.make') return 'type.make';\n            });\n\n            let result = query.toArray(cars);\n            assert.equal(result.length, 2);\n\n            let where = query.operations.first(WhereOperator);\n        })\n    })\n\n    it(\"should take top 1\", () => {\n        var ar = new Enumerable(cars).take(1).toArray();\n\n        assert.ok(ar.length == 1);\n    });\n\n    it(\"should skip 0\", () => {\n        var ar = new Enumerable(cars).skip(0).toArray();\n\n        assert.equal(ar[0].id, 1);\n        assert.equal(ar.length, 8);\n    });\n\n    it(\"should take MAX\", () => {\n        var ar = new Enumerable(cars).skip(0).take(Number.MAX_VALUE).toArray();\n\n        assert.equal(ar[0].id, 1);\n        assert.equal(ar.length, 8);\n    });\n\n    it(\"should skip 5\", () => {\n        var ar = new Enumerable(cars).skip(5).toArray();\n\n        assert.ok(ar[0].id == 6);\n    });\n\n    it(\"should skip 5 and take 3\", () => {\n        var ar = new Enumerable(cars).skip(5).take(3).toArray();\n\n        assert.ok(ar.length == 3);\n        assert.ok(ar[0].id == 6);\n    });\n\n    it(\"should skip while year is greater than 2010\", () => {\n        var ar = new Enumerable(cars).skipWhile(it => it.registrationYear >= 2010).toArray();\n\n        assert.ok(ar.length == 6);\n        assert.ok(ar[0].id == 3);\n    })\n\n    it(\"should order by a property\", () => {\n        var ar = new Enumerable(cars).orderBy(it => it.location).toArray();\n        \n        assert.deepEqual(ar.map(item => item.location), [\"BREVIK\", \"BREVIK\", \"HEISTAD\", \"LANGESUND\", \"LARVIK\", \"PORSGRUNN\", \"PORSGRUNN\", \"SKIEN\"]);\n    })\n\n    it(\"should be able to get first element\", () => {\n        var el = new Enumerable(cars).orderBy(it => it.location).first();\n\n        assert.equal(el.id, 5);\n    })\n\n    it(\"should slice a portion\", () => {\n        var ar = new Enumerable(cars).slice(3, 6).toArray();\n\n        assert.ok(ar.length == 3);\n        assert.ok(ar[0].id == 4);\n    })\n\n    it(\"shouldn't slice a portion when a token is used\", () => {\n        var ar = new Enumerable(cars).slice('test').toArray();\n\n        assert.ok(ar.length == 8);\n    })    \n\n    it(\"should be able to iterate\", () => {\n        var enumerable = new Enumerable(cars).take(3),\n            ar = Array.from(enumerable);\n\n        assert.equal(ar.length, 3);\n    })\n\n    it(\"should just work\", () => {\n        let query: IEnumerable<ICar> = new Enumerable<ICar>();\n\n        query.skip(5)\n        query.take(3);\n        \n        var ar = query.toArray(cars);\n\n        assert.ok(ar.length == 3);\n        assert.ok(ar[0].id == 6);\n    })\n\n    it(\"should iterate through operations\", () => {\n        let query: IEnumerable<ICar> = new Enumerable<ICar>();\n\n        query.skip(5);\n        query.take(3);\n\n\n        var operations = (<Enumerable<ICar>>query).operations.values();\n\n        var count = 0;\n        for (let operator of operations) {\n            if (operator) {\n                count++;\n            }\n        }\n\n        assert.equal(count, 2);\n    })\n\n    it(\"should be able to convert list by using select\", () => {\n        let car = new Enumerable(cars)\n            .where(it => it.id == 2)\n            .select<ISimpleCar>(it => <ISimpleCar>{ id: it.id, make: it.type.make, model: it.type.model })\n            .first();\n\n        assert.equal(car.id, 2);\n        assert.equal(car.make, 'NISSAN');\n        assert.equal(car.model, 'QASHQAI');\n    })\n\n    it(\"should be able to get first Operator by class\", () => {\n        let query: Enumerable<ICar> = new Enumerable<ICar>();\n\n        query.where(it => it.location == 'BREVIK');\n        query.skip(5);\n        query.take(3);\n        query.skip(1);\n        query.take(1);\n\n        let op = query.operations.first(SkipOperator);\n\n        assert.notEqual(op, null);\n        assert.equal(op.type, OperatorType.Skip);\n        assert.equal(op.count, 5);\n    })\n\n    it(\"should be able to get first Operator by type\", () => {\n        let query: Enumerable<ICar> = new Enumerable<ICar>();\n\n        query.where(it => it.location == 'BREVIK');\n        query.skip(5);\n        query.take(3);\n        query.skip(1);\n        query.take(1);\n\n        let op = query.operations.first(OperatorType.Skip);\n\n        assert.notEqual(op, null);\n        assert.equal(op.type, OperatorType.Skip);\n        assert.equal((<SkipOperator<ICar>>op).count, 5);\n    })\n\n    it(\"should be able to get first Operator by class and remove it for manual operator handling\", () => {\n        let query: Enumerable<ICar> = new Enumerable<ICar>(cars),\n            skip: SkipOperator<ICar>,\n            skipCount: number;\n\n        query.where(it => it.registrationYear >= 2000);\n        query.take(8);\n        query.skip(6);\n        query.take(3);\n        query.skip(1);\n\n        assert.equal(Array.from(query.operations.values()).length, 5);\n\n        skip = query.operations.first(SkipOperator);\n        \n        assert.notEqual(skip, null);\n        assert.equal(skip.type, OperatorType.Skip);\n        assert.equal(skip.count, 6);\n\n        query.operations.remove(skip);\n\n        skip = query.operations.first(SkipOperator);\n\n        assert.notEqual(skip, null);\n        assert.equal(skip.type, OperatorType.Skip);\n        assert.equal(skip.count, 1);\n\n        assert.equal(Array.from(query.operations.values()).length, 4);\n\n        let mycars = query.toArray();\n\n        assert.equal(mycars.length, 2);\n    })\n});\n"]}