{"version":3,"file":"operators.js","sourceRoot":"","sources":["../../src/test/operators.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from 'assert';\n\nimport { SkipOperator } from './../linq/operators/skipoperator';\nimport { WhereOperator } from './../linq/operators/whereoperator';\n\n(Symbol as any).asyncIterator = Symbol.asyncIterator || \"__@@asyncIterator__\";\n\ninterface ICar {\n    id: number\n    location: string\n    optional?: string\n    registrationYear: number\n    type: {\n        make: string\n        model: string\n    }\n}\n\ndescribe(\"When using Operator\", () => {\n\n    describe(\"for iterable\", () => {\n        let cars: Array<ICar>;\n\n        beforeEach(() => {\n            cars = [\n                <ICar>{ id: 1, location: 'SKIEN', registrationYear: 2016, type: { make: 'SAAB', model: '9-3' } },\n                <ICar>{ id: 2, location: 'PORSGRUNN', registrationYear: 2010, optional: 'yes', type: { make: 'NISSAN', model: 'QASHQAI' } },\n                <ICar>{ id: 3, location: 'PORSGRUNN', registrationYear: 2005, type: { make: 'SAAB', model: '9-3' } },\n                <ICar>{ id: 4, location: 'LANGESUND', registrationYear: 2004, optional: 'yes', type: { make: 'NISSAN', model: 'LEAF' } },\n                <ICar>{ id: 5, location: 'BREVIK', registrationYear: 2009, optional: 'yes', type: { make: 'TOYOTA', model: 'COROLLA' } },\n                <ICar>{ id: 6, location: 'BREVIK', registrationYear: 2014, optional: 'yes', type: { make: 'HONDA', model: 'HRV' } },\n                <ICar>{ id: 7, location: 'HEISTAD', registrationYear: 2013, type: { make: 'TOYOTA', model: 'YARIS' } },\n                <ICar>{ id: 8, location: 'LARVIK', registrationYear: 2009, type: { make: 'HONDA', model: 'CIVIC' } }\n            ];\n        })\n\n        describe(\"Skip\", () => {\n\n            it(\"it should be able to iterate\", async () => {\n                let result: Array<ICar> = [];\n                for (let item of new SkipOperator<ICar>(5).evaluate(cars)) {\n                    result.push(item);\n                }\n\n                assert.equal(result.length, 3);\n            });\n\n            it(\"it should be able to iterate when it is removed\", async () => {\n                let skip = new SkipOperator<ICar>(5),\n                    result: Array<ICar> = [];\n\n                skip.remove();\n                for await (let item of skip.evaluate(cars)) {\n                    result.push(item);\n                }\n\n                assert.equal(result.length, 8);\n            });\n        })\n    })\n\n    describe(\"for asyncIterable\", () => {\n        let cars; //: () => AsyncIterableIterator<ICar>;\n\n        beforeEach(() => {\n            let delay = (delay: number) => new Promise(resolve => setTimeout(resolve, delay));\n\n            cars = async function* () {\n                yield <ICar>{ id: 1, location: 'SKIEN', registrationYear: 2016, type: { make: 'SAAB', model: '9-3' } }\n                yield <ICar>{ id: 2, location: 'PORSGRUNN', registrationYear: 2010, optional: 'yes', type: { make: 'NISSAN', model: 'QASHQAI' } }\n\n                await delay(10)\n\n                yield <ICar>{ id: 3, location: 'PORSGRUNN', registrationYear: 2005, type: { make: 'SAAB', model: '9-3' } }\n                yield <ICar>{ id: 4, location: 'LANGESUND', registrationYear: 2004, optional: 'yes', type: { make: 'NISSAN', model: 'LEAF' } }\n                yield Promise.resolve(<ICar>{ id: 5, location: 'BREVIK', registrationYear: 2009, optional: 'yes', type: { make: 'TOYOTA', model: 'COROLLA' } })\n                yield <ICar>{ id: 6, location: 'BREVIK', registrationYear: 2014, optional: 'yes', type: { make: 'HONDA', model: 'HRV' } }\n                yield Promise.resolve(<ICar>{ id: 7, location: 'HEISTAD', registrationYear: 2013, type: { make: 'TOYOTA', model: 'YARIS' } })\n                yield <ICar>{ id: 8, location: 'LARVIK', registrationYear: 2009, type: { make: 'HONDA', model: 'CIVIC' } }\n            }\n        })\n\n        describe(\"Skip\", () => {\n\n            it(\"it should be able to iterate\", async () => {\n                \n                let result: Array<ICar> = [];      \n                for await (let item of new SkipOperator<ICar>(5).evaluateAsync(cars())) {\n                    result.push(item);\n                }\n\n                assert.equal(result.length, 3);\n            });\n\n            it(\"it should be able to iterate when it is removed\", async () => {\n\n                let skip = new SkipOperator<ICar>(5),\n                    result: Array<ICar> = [];\n\n                skip.remove();\n                for await (let item of skip.evaluateAsync(cars())) {\n                    result.push(item);\n                }\n\n                assert.equal(result.length, 8);\n            });\n\n\n        })\n    })\n});\n"]}