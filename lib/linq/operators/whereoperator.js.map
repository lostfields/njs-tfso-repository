{"version":3,"file":"whereoperator.js","sourceRoot":"","sources":["../../../src/linq/operators/whereoperator.ts"],"names":[],"mappings":";;AAAA,yCAAoD;AAIpD,oEAAiE;AACjE,gEAA6D;AAI7D,mBAAoC,SAAQ,mBAAiB;IAQzD,YAAY,aAA4B,EAAE,SAAc,EAAE,GAAG,UAAiB;QAC1E,KAAK,CAAC,uBAAY,CAAC,KAAK,CAAC,CAAC;QAE1B,gCAAgC;QAEhC,MAAM,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YACpB,KAAK,YAAY;gBACb,IAAI,OAAuB,CAAC;gBAE5B,IAAI,CAAC,WAAW,GAAG,CAAC,OAAO,GAAG,IAAI,+BAAc,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,EAAE,GAAG,UAAU,CAAC,CAAC;gBAC1F,IAAI,CAAC,UAAU,GAAG,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC;gBACnD,IAAI,CAAC,UAAU,GAAG,CAAC,MAAe;oBAC9B,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,IAAI,CAAC;gBACrE,CAAC,CAAC;gBAEF,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,IAAI,KAAK,CAAC;oBAC5B,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;gBAEjD,KAAK,CAAC;YAEV,KAAK,OAAO;gBACR,IAAI,CAAC,WAAW,GAAG,IAAI,2BAAY,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;gBAC5D,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;gBAC5B,IAAI,CAAC,UAAU,GAAG,CAAC,MAAe;oBAC9B,MAAM,CAAC,2BAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,KAAK,IAAI,CAAC;gBACpE,CAAC,CAAA;gBAED,KAAK,CAAC;QACd,CAAC;IACL,CAAC;IAED,kCAAkC;IAClC,8BAA8B;IAC9B,GAAG;IAEH,IAAW,SAAS;QAChB,MAAM,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,GAAG,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;IAClE,CAAC;IAED,IAAW,UAAU;QACjB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,IAAW,UAAU,CAAC,KAAkB;QACpC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC7B,CAAC;IAEM,QAAQ,CAAC,KAAgB;QAC5B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;IAC3D,CAAC;IAEM,QAAQ;QACX,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,wDAAwD;IACpF,CAAC;CACJ;AA9DD,sCA8DC","sourcesContent":["import { Operator, OperatorType } from './operator';\r\n\r\nimport { IExpression } from './../expressions/expression';\r\n\r\nimport { ReducerVisitor } from './../expressions/reducervisitor';\r\nimport { ODataVisitor } from './../expressions/odatavisitor';\r\n\r\nexport type PredicateType = 'Javascript' | 'OData';\r\n\r\nexport class WhereOperator<TEntity> extends Operator<TEntity> {\r\n    private _predicate: (entity: TEntity) => boolean;\r\n    private _expression: IExpression;\r\n\r\n    private _footprint: string\r\n\r\n    constructor(predicateType: 'OData', predicate: string)\r\n    constructor(predicateType: 'Javascript', predicate: (it: TEntity, ...param: any[]) => boolean, ...parameters: Array<any>)\r\n    constructor(predicateType: PredicateType, predicate: any, ...parameters: any[]) {\r\n        super(OperatorType.Where);\r\n\r\n        //this._parameters = parameters;\r\n\r\n        switch (predicateType) {\r\n            case 'Javascript':\r\n                let visitor: ReducerVisitor;\r\n\r\n                this._expression = (visitor = new ReducerVisitor()).visitLambda(predicate, ...parameters);\r\n                this._footprint = new Object(predicate).toString();\r\n                this._predicate = (entity: TEntity) => {\r\n                    return predicate.apply({}, [entity].concat(parameters)) === true;\r\n                };\r\n\r\n                if (visitor.isSolvable == false)\r\n                    throw new Error('Predicate is not solvable');\r\n\r\n                break;\r\n\r\n            case 'OData':\r\n                this._expression = new ODataVisitor().visitOData(predicate);\r\n                this._footprint = predicate;\r\n                this._predicate = (entity: TEntity) => {\r\n                    return ODataVisitor.evaluate(this._expression, entity) === true;\r\n                }\r\n                \r\n                break;\r\n        }\r\n    }\r\n\r\n    //public get parameters(): any[] {\r\n    //    return this._parameters;\r\n    //}\r\n\r\n    public get predicate(): (entity: TEntity) => boolean {\r\n        return this._predicate == null ? () => true : this._predicate;\r\n    }\r\n\r\n    public get expression(): IExpression {\r\n        return this._expression;\r\n    }\r\n\r\n    public set expression(value: IExpression) {\r\n        this._expression = value;\r\n    }\r\n\r\n    public evaluate(items: TEntity[]): TEntity[] {\r\n        return items.filter(entity => this._predicate(entity));\r\n    }\r\n\r\n    public toString(): string {\r\n        return this._footprint; // should be this._expression.toString() sooner or later\r\n    }\r\n}"]}