{"version":3,"file":"sliceoperator.js","sourceRoot":"","sources":["../../../src/linq/operators/sliceoperator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,yCAAoD;AAEpD,mBAAoC,SAAQ,mBAAiB;IACzD,YAAmB,KAAmB,EAAS,GAAW;QACtD,KAAK,CAAC,uBAAY,CAAC,IAAI,CAAC,CAAC;QADV,UAAK,GAAL,KAAK,CAAc;QAAS,QAAG,GAAH,GAAG,CAAQ;IAE1D,CAAC;IAEM,CAAE,QAAQ,CAAC,KAAwB;QACtC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC;QAEb,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC;YACrB,GAAG,EAAE,CAAC;YAEN,EAAE,CAAA,CAAC,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC,CAAC;gBACvB,EAAE,CAAC,CAAE,OAAO,IAAI,CAAC,KAAK,IAAI,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,KAAM,CAAC;oBAAC,QAAQ,CAAC;gBAClE,EAAE,CAAC,CAAE,OAAO,IAAI,CAAC,GAAG,IAAI,QAAQ,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC;oBAAC,QAAQ,CAAC;YAClE,CAAC;YAED,MAAM,IAAI,CAAC;QACf,CAAC;IACL,CAAC;IAEc,aAAa,CAAC,KAA6B;;YACtD,IAAI,GAAG,GAAG,CAAC,CAAC;;gBAEZ,GAAG,CAAC,CAAmB,IAAA,UAAA,cAAA,KAAK,CAAA,WAAA;oBAAjB,IAAI,IAAI,iCAAA,CAAA;oBACf,GAAG,EAAE,CAAC;oBAEN,EAAE,CAAA,CAAC,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC,CAAC;wBACvB,EAAE,CAAC,CAAE,OAAO,IAAI,CAAC,KAAK,IAAI,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,KAAM,CAAC;4BAAC,QAAQ,CAAC;wBAClE,EAAE,CAAC,CAAE,OAAO,IAAI,CAAC,GAAG,IAAI,QAAQ,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC;4BAAC,QAAQ,CAAC;oBAClE,CAAC;oBAED,MAAM,IAAI,CAAC;iBACd;;;;;;;;;;QACL,CAAC;KAAA;CACJ;AAlCD,sCAkCC","sourcesContent":["import { Operator, OperatorType } from './operator';\n\nexport class SliceOperator<TEntity> extends Operator<TEntity> {\n    constructor(public begin: number | any, public end: number) {\n        super(OperatorType.Skip);\n    }\n\n    public * evaluate(items: Iterable<TEntity>): IterableIterator<TEntity> {\n        let idx = -1;\n\n        for (let item of items) {\n            idx++;\n\n            if(this.removed == false) {\n                if ( typeof this.begin == 'number' && idx < this.begin ) continue;\n                if ( typeof this.end == 'number' && idx >= this.end) continue;\n            }\n\n            yield item;\n        }\n    }\n\n    public async * evaluateAsync(items: AsyncIterable<TEntity>): AsyncIterableIterator<TEntity> {\n        let idx = 0;\n\n        for await (let item of items) {\n            idx++;\n\n            if(this.removed == false) {\n                if ( typeof this.begin == 'number' && idx < this.begin ) continue;\n                if ( typeof this.end == 'number' && idx >= this.end) continue;\n            }\n\n            yield item;\n        }\n    }\n}"]}