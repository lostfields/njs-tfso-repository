{"version":3,"file":"enumerable.js","sourceRoot":"","sources":["../../src/linq/enumerable.ts"],"names":[],"mappings":"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","sourcesContent":["import { Operator, OperatorType } from './operators/operator';\nimport { OrderByOperator } from './operators/orderbyoperator';\nimport { SkipOperator } from './operators/skipoperator';\nimport { SkipWhileOperator } from './operators/skipwhileoperator';\nimport { TakeOperator } from './operators/takeoperator';\nimport { WhereOperator } from './operators/whereoperator';\nimport { SelectOperator } from './operators/selectoperator';\nimport { JoinOperator, JoinType } from './operators/joinoperator';\nimport { SliceOperator } from './operators/sliceoperator';\n\nimport { RenameVisitor } from './expressions/renamevisitor';\nimport { RemapVisitor } from './expressions/remapvisitor';\n\nimport { Operations } from './operations';\n\nexport { OperatorType };\n\n(Symbol as any).asyncIterator = Symbol.asyncIterator || \"__@@asyncIterator__\";\n\nexport interface IEnumerableOptions<TEntity> {\n    query?: IEnumerable<TEntity>\n    parent?: IEnumerable<any>\n}\n\nexport interface IEnumerable<TEntity> extends Iterable<TEntity>, AsyncIterable<TEntity> {\n    readonly operations: Operations<TEntity>\n\n    from(items: Array<TEntity>)\n    from(items: Iterable<TEntity>)\n    from(items: AsyncIterable<TEntity>)\n\n    /**\n    * Where clause using OData $filter expression returning either true or false. Any parameters used is properties of TEntity\n    * @param predicate OData expression\n    */\n    where(predicate: string): this\n    /**\n     * Where clause using Javascript expression returning either true or false\n     * @param predicate javascript expression\n     * @param parameters any javascript parameters has to be declared\n     */\n    where(predicate: (it: TEntity, ...param: any[]) => boolean, ...parameters: any[]): this\n\n    //orderBy(property: (it: TEntity) => void): this\n    //range(start: number, count: number): this\n    skip(count: number): this\n    take(count: number): this\n    //reverse(): this\n\n    join<TInner, TResult>(inner: IEnumerable<TInner>, outerKey: (a: TEntity) => void, innerKey: (b: TInner) => void, selector: (outer: TEntity, inner: IEnumerable<TInner>) => TResult): IEnumerable<TResult>\n    select<TResult>(selector: (it: TEntity) => TResult): IEnumerable<TResult>\n\n    first(items?: Array<TEntity>): TEntity\n    firstAsync(items?: Array<TEntity>): Promise<TEntity>\n\n    toArray(items: Array<TEntity>): Array<TEntity>\n    toArray(): Array<TEntity>\n\n    toArrayAsync(items: Array<TEntity>): Promise<Array<TEntity>>\n    toArrayAsync(): Promise<Array<TEntity>>\n}\n\nexport class Enumerable<TEntity> implements IEnumerable<TEntity>\n{\n    private _name: string = null;\n\n    protected _operations: Operations<TEntity>;\n    \n    constructor(items?: Array<TEntity>) \n    constructor(items?: Iterable<TEntity>) \n    constructor(items?: AsyncIterable<TEntity>)\n    constructor(private items?: any) {\n        this._operations = new Operations<TEntity>();\n\n        this.from(items);\n    }\n\n    public get name(): string {\n        if (this._name != null)\n            return this._name;\n\n        if(this.items)\n            return this.items.constructor.name;\n\n        return \"\";\n    }\n\n    public get operations(): Operations<TEntity> {\n        return this._operations;\n    }\n\n    /**\n     * A remapper of identifier names, members is seperated with dot.\n     * @param remapper Function that returns the new name of the identifier\n     */\n    public remap(remapper: (name: string) => string) : this\n    /**\n     * A remapper of values that corresponds to a identifier name\n     * @param remapper Function that returns the new value\n     */\n    public remap(remapper: (name: string, value: any) => any) : this\n    public remap(remapper: (...args) => any) : this {\n        let visitor = remapper.length == 2 ? new RemapVisitor(null, remapper) : new RemapVisitor(remapper, null);\n    \n        for (let item of this._operations.values()) {\n            switch (item.type) {\n                case OperatorType.Where:\n                    (<WhereOperator<TEntity>>item).expression = visitor.visit((<WhereOperator<TEntity>>item).expression);\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Where clause using OData $filter expression returning either true or false. Any parameters used is properties of TEntity\n     * @param predicate OData expression\n     */\n    public where(predicate: string): this \n    /**\n     * Where clause using Javascript expression returning either true or false\n     * @param predicate javascript expression\n     * @param parameters any javascript parameters has to be declared\n     */\n    public where(predicate: (it: TEntity, ...param: any[]) => boolean, ...parameters: any[]): this\n    public where(): this {\n        let predicate: any = arguments[0],\n            parameters: Array<any> = [];\n\n        if (arguments.length >= 2)\n            parameters = Array.from(arguments).slice(1)\n\n        switch (typeof predicate) {\n            case 'string':\n                this._operations.add(new WhereOperator<TEntity>('OData', predicate));\n                break;\n\n            case 'function':\n                this._operations.add(new WhereOperator<TEntity>('Javascript', predicate, ...parameters));\n                break;\n\n            default:\n                throw new Error('Where operator can not recognize predicate either as javascript or odata');\n        }\n\n        return this;\n    }\n   \n    /**\n    * returns a new IEnumerable of TResult\n    * @param selector\n    */\n    public select<TResult>(selector: (it: TEntity) => TResult): IEnumerable<TResult> {\n        if (typeof this.items == 'object' && typeof this.items[Symbol.asyncIterator] == 'function') {\n            return new Enumerable<TResult>(new SelectOperator<TEntity>(selector).evaluateAsync(this));\n        } else {\n            return new Enumerable<TResult>(new SelectOperator<TEntity>(selector).evaluate(this));\n        }\n    }\n\n    /**\n     * returns a new IEnumerable of TResult (Left Join)\n     * @param inner\n     * @param outerKey\n     * @param innerKey\n     * @param selector A function that returns the new object, (outer, inner) => { outer, inner } or (outer, inner) => Object.assign({}, a, { childs: inner.toArray() })\n     * @param indexing If set to true an Array of outerKey will be passed into iterator of TInner as { keys: Array<any> }. Cons, all elements of outer iterator will be be kept in memory.\n     * @returns IEnumerable<TResult>\n     */\n    public groupJoin<TInner, TResult>(inner: Iterable<TInner>, outerKey: (outer: TEntity) => void, innerKey: (inner: TInner) => void, selector: (outer: TEntity, inner: IEnumerable<TInner>) => TResult, indexing?: boolean): IEnumerable<TResult>\n    /**\n     * returns a new IEnumerable of TResult (Left Join)\n     * @param inner\n     * @param outerKey\n     * @param innerKey\n     * @param selector A function that returns the new object, (outer, inner) => { outer, inner } or (outer, inner) => Object.assign({}, a, { childs: inner.toArray() })\n     * @param indexing If set to true an Array of outerKey will be passed into iterator of TInner as { keys: Array<any> }. Cons, all elements of outer iterator will be be kept in memory.\n     * @returns IEnumerable<TResult>\n     */\n    public groupJoin<TInner, TResult>(inner: AsyncIterable<TInner>, outerKey: (outer: TEntity) => void, innerKey: (inner: TInner) => void, selector: (outer: TEntity, inner: IEnumerable<TInner>) => TResult, indexing?: boolean): IEnumerable<TResult> \n    public groupJoin<TInner, TResult>(inner: Iterable<TInner> | AsyncIterable<TInner>, outerKey: (outer: TEntity) => void, innerKey: (inner: TInner) => void, selector: (outer: TEntity, inner: IEnumerable<TInner>) => TResult, indexing: boolean = false): IEnumerable<TResult> {\n        let iterable: Iterable<TInner> | AsyncIterable<TInner> = ((scope) => <any>{\n            [Symbol.asyncIterator]: (options) => {\n                return inner[Symbol.asyncIterator](Object.assign({ parent: scope }, options));\n            },\n            [Symbol.iterator]: (options) => {\n                return inner[Symbol.iterator](Object.assign({ parent: scope }, options));\n            }\n        })(this);\n\n        if (typeof inner == 'object' && typeof inner[Symbol.asyncIterator] == 'function') {\n            return new Enumerable<TResult>(new JoinOperator<TEntity, TInner, TResult>(JoinType.Left, outerKey, innerKey, selector, indexing).evaluateAsync(this, <AsyncIterable<TInner>>iterable));\n        } else {\n            return new Enumerable<TResult>(new JoinOperator<TEntity, TInner, TResult>(JoinType.Left, outerKey, innerKey, selector, indexing).evaluate(this, <Iterable<TInner>>iterable));\n        }\n    }\n\n    /**\n     * returns a new IEnumerable of TResult (Inner Join)\n     * @param inner\n     * @param outerKey\n     * @param innerKey\n     * @param selector A function that returns the new object, (outer, inner) => { outer, inner } or (outer, inner) => Object.assign({}, a, { childs: inner.toArray() })\n     * @param indexing If set to true an Array of outerKey will be passed into iterator of TInner as { keys: Array<any> }. Cons, all elements of outer iterator will be be kept in memory.\n     * @returns IEnumerable<TResult>\n     */\n    public join<TInner, TResult>(inner: Iterable<TInner>, outerKey: (outer: TEntity) => void, innerKey: (inner: TInner) => void, selector: (outer: TEntity, inner: IEnumerable<TInner>) => TResult, indexing?: boolean): IEnumerable<TResult> \n    /**\n     * returns a new IEnumerable of TResult (Inner Join)\n     * @param inner\n     * @param outerKey\n     * @param innerKey\n     * @param selector A function that returns the new object, (outer, inner) => { outer, inner } or (outer, inner) => Object.assign({}, a, { childs: inner.toArray() })\n     * @param indexing If set to true an Array of outerKey will be passed into iterator of TInner as { keys: Array<any> }. Cons, all elements of outer iterator will be be kept in memory.\n     * @returns IEnumerable<TResult>\n     */\n    public join<TInner, TResult>(inner: AsyncIterable<TInner>, outerKey: (outer: TEntity) => void, innerKey: (inner: TInner) => void, selector: (outer: TEntity, inner: IEnumerable<TInner>) => TResult, indexing?: boolean): IEnumerable<TResult>\n    public join<TInner, TResult>(inner: Iterable<TInner> | AsyncIterable<TInner>, outerKey: (outer: TEntity) => void, innerKey: (inner: TInner) => void, selector: (outer: TEntity, inner: IEnumerable<TInner>) => TResult, indexing: boolean = false): IEnumerable<TResult> {\n        let iterable: Iterable<TInner> | AsyncIterable<TInner> = ((scope) => <any>{\n            [Symbol.asyncIterator]: (options) => {\n                return inner[Symbol.asyncIterator](Object.assign({ parent: scope }, options));\n            },\n            [Symbol.iterator]: (options) => {\n                return inner[Symbol.iterator](Object.assign({ parent: scope }, options));\n            }\n        })(this);\n\n        if (typeof inner == 'object' && typeof inner[Symbol.asyncIterator] == 'function') {\n            return new Enumerable<TResult>(new JoinOperator<TEntity, TInner, TResult>(JoinType.Inner, outerKey, innerKey, selector, indexing).evaluateAsync(this, <AsyncIterable<TInner>>iterable));\n        } else {\n            return new Enumerable<TResult>(new JoinOperator<TEntity, TInner, TResult>(JoinType.Inner, outerKey, innerKey, selector, indexing).evaluate(this, <Iterable<TInner>>iterable));\n        }\n    }\n\n    /**\n     * Returns a specified number of contiguous elements from the start of a sequence.\n     * @param count The number of elements to return\n     */\n    public take(count: number): this {\n        this._operations.add(new TakeOperator<TEntity>(count));\n\n        return this;\n    }\n\n    /**\n     * Bypasses a specified number of elements in a sequence and then returns the remaining elements\n     * @param count The number of elements to skip before returning the remaining elements\n     */\n    public skip(count: number): this {\n        this._operations.add(new SkipOperator<TEntity>(count));\n\n        return this;\n    }\n\n    /**\n     * Bypassing elements using OData $filter expression as long as specified condition is true and then returns the remaining elements\n     * @param predicate OData expression\n     */\n    public skipWhile(predicate: string): this \n    /**\n     * Bypassing elements using Javascript expression as long as specified condition is true and then returns the remaining elements\n     * @param predicate javascript expression\n     * @param parameters any javascript parameters has to be declared\n     */\n    public skipWhile(predicate: (it: TEntity, ...param: any[]) => boolean, ...parameters: any[]): this\n    public skipWhile(): this {\n        let predicate: any = arguments[0],\n            parameters: Array<any> = [];\n\n        if (arguments.length >= 2)\n            parameters = Array.from(arguments).slice(1)\n\n        switch (typeof predicate) {\n            case 'string':\n                this._operations.add(new SkipWhileOperator<TEntity>('OData', predicate));\n                break;\n\n            case 'function':\n                this._operations.add(new SkipWhileOperator<TEntity>('Javascript', predicate, ...parameters));\n                break;\n\n            default:\n                throw new Error('SkipWhile operator can not recognize predicate either as javascript or odata');\n        }\n\n        return this;\n    }\n\n    public orderBy(property: (it: TEntity) => void): this {\n        this._operations.add(new OrderByOperator<TEntity>(property));\n\n        return this;\n    }\n\n    /**\n     * Bypasses all elements before beginning and returns the remaining elements or up to the specified end\n     * @param begin zero-based index at which to begin extraction\n     * @param end zero-based index before which to end extraction\n     */\n    public slice(begin: number, end?: number): this\n    /**\n     * Bypasses all elements before beginning and returns the remaining elements\n     * Note: If the beginning is not an index it's up to the repository to handle slicing.\n     * @param token a token that indicates where to begin extraction\n     */\n    public slice(token: any): this\n    public slice(begin: any, end: number = undefined): this\n    {\n        this._operations.add(new SliceOperator<TEntity>(begin, typeof begin == 'number' ? end : undefined));\n\n        return this;\n    }\n    \n    public from(items: Array<TEntity>) : this\n    public from(items: Iterable<TEntity>) : this\n    public from(items: AsyncIterable<TEntity>) : this\n    public from(items: Array<TEntity> | Iterable<TEntity> | AsyncIterable<TEntity>): this {\n        if (items) {\n            if (this._name == null)\n                this._name = items.constructor.name;\n\n            this.items = items;\n\n            if (typeof items == 'object' && typeof items[Symbol.asyncIterator] == 'function') {\n                this[Symbol.iterator] = undefined; // this isn't an sync iterator, unmark it from IEnumerable\n                this[Symbol.asyncIterator] = this.asyncIterator;\n            }\n            else if (typeof items == 'object' && typeof items[Symbol.iterator] == 'function') {\n                this[Symbol.asyncIterator] = undefined; // this isn't an async iterator, unmark it from IEnumerable\n                this[Symbol.iterator] = this.iterator;\n            }\n            else {\n                throw new TypeError('Enumerable is instanced with a non-iterable object');\n            }\n        }\n\n        return this;\n    }\n\n    public first(items?: Array<TEntity>): TEntity {\n        if (items)\n            this.from(items);\n\n        let iteratorResult = this[Symbol.iterator]().next();\n        if (iteratorResult.done == false)\n            return iteratorResult.value;\n\n        return null;\n    }\n\n    public async firstAsync(items?: Array<TEntity>): Promise<TEntity> {\n        if (items)\n            this.from(items);\n\n        let iteratorResult = await this[Symbol.asyncIterator]().next();\n        if (iteratorResult.done == false)\n            return iteratorResult.value;\n\n        return null;\n    }\n\n    public toArray(items?: Iterable<TEntity>): Array<TEntity> {\n        if (items)\n            this.from(items);\n\n        let result: Array<TEntity> = [];\n        for (let item of this.iterator())\n            result.push(item);\n\n        return result;\n    }\n        \n    public async toArrayAsync(items?: Iterable<TEntity>): Promise<Array<TEntity>> {\n        if (items)\n            this.from(items);\n\n        let result: Array<TEntity> = [];\n        for await(let item of this.asyncIterator()) //.asyncIterator())\n            result.push(item);\n\n        return result;\n    }\n\n    public static fromArray<TEntity>(items?: Array<TEntity>): Enumerable<TEntity> {\n        return new Enumerable(items);\n    }\n\n    protected * iterator(options?: IEnumerableOptions<TEntity>): IterableIterator<TEntity> {\n        if (!options || options.query == null)\n            options = Object.assign(options || {}, { query: this });\n\n        let handleItems = function* (items: Iterable<TEntity>, operators: Array<Operator<TEntity>>, idx: number = null) { \n            if(idx == null) idx = operators.length - 1;\n            \n            switch(idx) {\n                case -1:\n                    yield* items; break;\n\n                case 0:\n                    yield* operators[idx].evaluate( items ); break;\n                \n                default:\n                    yield* operators[idx].evaluate( handleItems(items, operators, idx - 1) ); break;\n            }\n        }\n\n        yield* handleItems(this.items[Symbol.iterator](options), Array.from(this.operations.values()));\n    }\n\n    protected async * asyncIterator(options?: IEnumerableOptions<TEntity>): AsyncIterableIterator<TEntity> {\n        if (!options || options.query == null)\n            options = Object.assign(options || {}, { query: this });\n\n        let handleItems = async function* (items: AsyncIterable<TEntity>, operators: Array<Operator<TEntity>>, idx: number = null) { \n            if(idx == null) idx = operators.length - 1;\n            \n            switch(idx) {\n                case -1:\n                    for await (let item of items)\n                        yield item;\n                    \n                    break;\n\n                case 0:\n                    yield* operators[idx].evaluateAsync(items); break;\n                \n                default:\n                    yield* operators[idx].evaluateAsync(handleItems(items, operators, idx - 1)); break;\n            }\n        }\n\n        yield* handleItems(this.items[Symbol.asyncIterator](options), Array.from(this.operations.values()));        \n    }\n\n    [Symbol.asyncIterator] = (): AsyncIterableIterator<TEntity> => this.asyncIterator();\n    [Symbol.iterator] = (): IterableIterator<TEntity> => this.iterator();\n\n}\n\nexport default Enumerable;"]}