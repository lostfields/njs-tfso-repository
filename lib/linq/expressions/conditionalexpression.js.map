{"version":3,"file":"conditionalexpression.js","sourceRoot":"","sources":["../../../src/linq/expressions/conditionalexpression.ts"],"names":[],"mappings":";;AAAA,6CAAuE;AAWvE,2BAAmC,SAAQ,uBAAU;IACjD,YAAmB,SAAsB,EAAS,OAAoB,EAAS,OAAoB;QAC/F,KAAK,CAAC,2BAAc,CAAC,WAAW,CAAC,CAAC;QADnB,cAAS,GAAT,SAAS,CAAa;QAAS,YAAO,GAAP,OAAO,CAAa;QAAS,YAAO,GAAP,OAAO,CAAa;IAEnG,CAAC;IAEM,KAAK,CAAC,UAAkC;QAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YAC/J,MAAM,CAAC,IAAI,CAAC;QAEhB,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;CACJ;AAXD,sDAWC","sourcesContent":["import { IExpression, Expression, ExpressionType } from './expression';\r\n\r\n/**\r\n * Not in use for now\r\n */\r\nexport interface IConditionalExpression extends IExpression {\r\n    condition: IExpression\r\n    success: IExpression\r\n    failure: IExpression\r\n}\r\n\r\nexport class ConditionalExpression extends Expression implements IConditionalExpression {\r\n    constructor(public condition: IExpression, public success: IExpression, public failure: IExpression) {\r\n        super(ExpressionType.Conditional);\r\n    }\r\n\r\n    public equal(expression: IConditionalExpression) {\r\n        if (this.type == expression.type && this.condition.equal(expression.condition) && this.success.equal(expression.success) && this.failure.equal(expression.failure))\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n}"]}