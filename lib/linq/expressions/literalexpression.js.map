{"version":3,"file":"literalexpression.js","sourceRoot":"","sources":["../../../src/linq/expressions/literalexpression.ts"],"names":[],"mappings":";;AACA,6CAAuE;AAEvE,uBAA+B,SAAQ,uBAAU;IAC7C,YAAmB,KAAU;QACzB,KAAK,CAAC,2BAAc,CAAC,OAAO,CAAC,CAAC;QADf,UAAK,GAAL,KAAK,CAAK;IAE7B,CAAC;IAEM,KAAK,CAAC,UAA8B;QACvC,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,CAAC;IAC1E,CAAC;CACJ;AARD,8CAQC","sourcesContent":["import { ILiteralExpression } from './interfaces/iliteralexpression';\r\nimport { IExpression, Expression, ExpressionType } from './expression';\r\n\r\nexport class LiteralExpression extends Expression implements ILiteralExpression {\r\n    constructor(public value: any) {\r\n        super(ExpressionType.Literal);\r\n    }\r\n\r\n    public equal(expression: ILiteralExpression): boolean {\r\n        return this.type == expression.type && this.value == expression.value;\r\n    }\r\n}\r\n\r\nexport { ILiteralExpression }"]}