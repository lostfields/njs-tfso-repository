{"version":3,"file":"binaryexpression.js","sourceRoot":"","sources":["../../../src/linq/expressions/binaryexpression.ts"],"names":[],"mappings":";;AAAA,sEAAuF;AA8C3D,6BA9CA,sCAAkB,CA8CA;AA7C9C,6CAAuE;AAEvE,sBAA8B,SAAQ,uBAAU;IAC5C,YAAmB,QAA4B,EAAS,IAAiB,EAAS,KAAkB;QAChG,KAAK,CAAC,2BAAc,CAAC,MAAM,CAAC,CAAC;QADd,aAAQ,GAAR,QAAQ,CAAoB;QAAS,SAAI,GAAJ,IAAI,CAAa;QAAS,UAAK,GAAL,KAAK,CAAa;IAEpG,CAAC;IAEM,KAAK,CAAC,UAA6B;QACtC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAC/G,MAAM,CAAC,IAAI,CAAC;QAEhB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpB,KAAK,sCAAkB,CAAC,QAAQ,CAAC;gBACjC,KAAK,sCAAkB,CAAC,cAAc,CAAC;gBACvC,KAAK,sCAAkB,CAAC,WAAW,CAAC;gBACpC,KAAK,sCAAkB,CAAC,GAAG,CAAC;gBAC5B,KAAK,sCAAkB,CAAC,EAAE;oBACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACtF,CAAC;QACL,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAEM,QAAQ;QACX,IAAI,QAAQ,GAAG,GAAG,EAAE;YAChB,MAAM,CAAA,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACnB,KAAK,sCAAkB,CAAC,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC;gBAC7C,KAAK,sCAAkB,CAAC,WAAW,EAAE,MAAM,CAAC,GAAG,CAAC;gBAChD,KAAK,sCAAkB,CAAC,cAAc,EAAE,MAAM,CAAC,GAAG,CAAC;gBACnD,KAAK,sCAAkB,CAAC,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC;gBAC7C,KAAK,sCAAkB,CAAC,OAAO,EAAE,MAAM,CAAC,GAAG,CAAC;gBAC5C,KAAK,sCAAkB,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC;gBACxC,KAAK,sCAAkB,CAAC,EAAE,EAAE,MAAM,CAAC,GAAG,CAAC;gBACvC,KAAK,sCAAkB,CAAC,WAAW,EAAE,MAAM,CAAC,GAAG,CAAC;gBAChD,KAAK,sCAAkB,CAAC,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC;gBAC/C,KAAK,sCAAkB,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC;YACpD,CAAC;QACL,CAAC,CAAA;QAED,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,2BAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,2BAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC;IAClO,CAAC;CACJ;AAzCD,4CAyCC","sourcesContent":["import { IBinaryExpression, BinaryOperatorType } from './interfaces/ibinaryexpression';\r\nimport { IExpression, Expression, ExpressionType } from './expression';\r\n\r\nexport class BinaryExpression extends Expression implements IBinaryExpression {\r\n    constructor(public operator: BinaryOperatorType, public left: IExpression, public right: IExpression) {\r\n        super(ExpressionType.Binary);\r\n    }\r\n\r\n    public equal(expression: IBinaryExpression): boolean {\r\n        if (this.operator == expression.operator && this.left.equal(expression.left) && this.right.equal(expression.right))\r\n            return true;\r\n\r\n        if (this.operator == expression.operator) {\r\n            switch (this.operator) {\r\n                case BinaryOperatorType.Addition:\r\n                case BinaryOperatorType.Multiplication:\r\n                case BinaryOperatorType.ExclusiveOr:\r\n                case BinaryOperatorType.And:\r\n                case BinaryOperatorType.Or:\r\n                    return this.left.equal(expression.right) && this.right.equal(expression.left);\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public toString() {\r\n        let operator = () => {\r\n            switch(this.operator) {\r\n                case BinaryOperatorType.Addition: return '+';\r\n                case BinaryOperatorType.Subtraction: return '-';\r\n                case BinaryOperatorType.Multiplication: return '*';\r\n                case BinaryOperatorType.Division: return '/';\r\n                case BinaryOperatorType.Modulus: return '%';\r\n                case BinaryOperatorType.And: return '&';\r\n                case BinaryOperatorType.Or: return '|';\r\n                case BinaryOperatorType.ExclusiveOr: return '^';\r\n                case BinaryOperatorType.LeftShift: return '<<';\r\n                case BinaryOperatorType.RightShift: return '>>';\r\n            }\r\n        }\r\n\r\n        return `${(this.left.type == ExpressionType.Binary) ? `(${this.left.toString()})` : this.left.toString()} ${operator()} ${(this.right.type == ExpressionType.Binary) ? `(${this.right.toString()})` : this.right.toString()}`;\r\n    }\r\n}\r\n\r\nexport { IBinaryExpression, BinaryOperatorType };"]}