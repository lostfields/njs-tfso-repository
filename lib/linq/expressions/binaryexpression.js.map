{"version":3,"file":"binaryexpression.js","sourceRoot":"","sources":["../../../src/linq/expressions/binaryexpression.ts"],"names":[],"mappings":";;AAAA,6CAAuE;AAEvE,IAAY,kBAYX;AAZD,WAAY,kBAAkB;IAC1B,yEAAW,CAAA;IACX,mEAAQ,CAAA;IACR,mEAAQ,CAAA;IACR,+EAAc,CAAA;IAEd,iEAAO,CAAA;IACP,yDAAG,CAAA;IACH,uDAAE,CAAA;IACF,yEAAW,CAAA;IACX,qEAAS,CAAA;IACT,uEAAU,CAAA;AACd,CAAC,EAZW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAY7B;AAQD,sBAA8B,SAAQ,uBAAU;IAC5C,YAAmB,QAA4B,EAAS,IAAiB,EAAS,KAAkB;QAChG,KAAK,CAAC,2BAAc,CAAC,MAAM,CAAC,CAAC;QADd,aAAQ,GAAR,QAAQ,CAAoB;QAAS,SAAI,GAAJ,IAAI,CAAa;QAAS,UAAK,GAAL,KAAK,CAAa;IAEpG,CAAC;IAEM,KAAK,CAAC,UAA6B;QACtC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAC/G,MAAM,CAAC,IAAI,CAAC;QAEhB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpB,KAAK,kBAAkB,CAAC,QAAQ,CAAC;gBACjC,KAAK,kBAAkB,CAAC,cAAc,CAAC;gBACvC,KAAK,kBAAkB,CAAC,WAAW,CAAC;gBACpC,KAAK,kBAAkB,CAAC,GAAG,CAAC;gBAC5B,KAAK,kBAAkB,CAAC,EAAE;oBACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACtF,CAAC;QACL,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;CACJ;AAtBD,4CAsBC","sourcesContent":["import { IExpression, Expression, ExpressionType } from './expression';\r\n\r\nexport enum BinaryOperatorType {\r\n    Subtraction,\r\n    Addition,\r\n    Division,\r\n    Multiplication,\r\n\r\n    Modulus,        // %\r\n    And,            // &\r\n    Or,             // |\r\n    ExclusiveOr,    // ^\r\n    LeftShift,      // <<\r\n    RightShift,     // >>\r\n}\r\n\r\nexport interface IBinaryExpression extends IExpression {\r\n    operator: BinaryOperatorType\r\n    left: IExpression\r\n    right: IExpression\r\n}\r\n\r\nexport class BinaryExpression extends Expression implements IBinaryExpression {\r\n    constructor(public operator: BinaryOperatorType, public left: IExpression, public right: IExpression) {\r\n        super(ExpressionType.Binary);\r\n    }\r\n\r\n    public equal(expression: IBinaryExpression): boolean {\r\n        if (this.operator == expression.operator && this.left.equal(expression.left) && this.right.equal(expression.right))\r\n            return true;\r\n\r\n        if (this.operator == expression.operator) {\r\n            switch (this.operator) {\r\n                case BinaryOperatorType.Addition:\r\n                case BinaryOperatorType.Multiplication:\r\n                case BinaryOperatorType.ExclusiveOr:\r\n                case BinaryOperatorType.And:\r\n                case BinaryOperatorType.Or:\r\n                    return this.left.equal(expression.right) && this.right.equal(expression.left);\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}"]}