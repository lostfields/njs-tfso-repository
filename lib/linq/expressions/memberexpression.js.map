{"version":3,"file":"memberexpression.js","sourceRoot":"","sources":["../../../src/linq/expressions/memberexpression.ts"],"names":[],"mappings":";;AAAA,6CAAuE;AAOvE,sBAA8B,SAAQ,uBAAU;IAC5C,YAAmB,MAAmB,EAAS,QAAqB;QAChE,KAAK,CAAC,2BAAc,CAAC,MAAM,CAAC,CAAC;QADd,WAAM,GAAN,MAAM,CAAa;QAAS,aAAQ,GAAR,QAAQ,CAAa;IAEpE,CAAC;IAEM,KAAK,CAAC,UAA6B;QACtC,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IAC5H,CAAC;CACJ;AARD,4CAQC","sourcesContent":["import { IExpression, Expression, ExpressionType } from './expression';\r\n\r\nexport interface IMemberExpression extends IExpression {\r\n    object: IExpression\r\n    property: IExpression\r\n}\r\n\r\nexport class MemberExpression extends Expression implements IMemberExpression {\r\n    constructor(public object: IExpression, public property: IExpression) {\r\n        super(ExpressionType.Member);\r\n    }\r\n\r\n    public equal(expression: IMemberExpression): boolean {\r\n        return this.type == expression.type && this.object.equal(expression.object) && this.property.equal(expression.property);\r\n    }\r\n}"]}