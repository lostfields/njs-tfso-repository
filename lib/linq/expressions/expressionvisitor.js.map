{"version":3,"file":"expressionvisitor.js","sourceRoot":"","sources":["../../../src/linq/expressions/expressionvisitor.ts"],"names":[],"mappings":";;AAAA,2DAAmD;AACnD,qEAA6D;AAK7D,2DAA4E;AAC5E,uDAAsE;AAEtE,iEAAqF;AACrF,yDAAyE;AACzE,yDAAyE;AACzE,uDAAyG;AACzG,yDAA6F;AAC7F,2DAAiG;AACjG,mEAAwF;AACxF,uDAAsE;AACtE,2EAAoG;AACpG,yDAAyF;AAEzF,yDAAsD;AAGtD;IAII;QACI,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACnB,CAAC;IAEM,MAAM;QACT,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAEM,IAAI,CAAC,IAAiB;QACzB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IAChC,CAAC;IAEM,GAAG;QACN,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAChC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;IAC5B,CAAC;IAEM,IAAI,CAAC,QAAgB,CAAC;QACzB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;YAC1B,MAAM,CAAM;gBACR,IAAI,EAAE,CAAC;aACV,CAAC;QAEN,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,gCAAgC;IAC/E,CAAC;CACJ;AAlCD,0CAkCC;AAED;IAII;QACI,IAAI,CAAC,gBAAgB,GAAG,IAAI,eAAe,EAAE,CAAC;IAClD,CAAC;IAED,IAAW,KAAK;QACZ,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;IACjC,CAAC;IAEM,UAAU,CAAC,MAAc;QAC5B,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,iGAAiG,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,qEAAqE;QAE/O,IAAI,GAAG,GAAG,sBAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACpC,IAAI,CAAC;YACD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACN,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YAC3C,CAAC;QACL,CAAC;QACD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACR,MAAM,IAAI,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;QAChC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,qBAAqB,CAAC,UAAkB;QAC3C,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACb,IAAI,GAAG,GAAG,2BAAgB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAC7C,IAAI,CAAC;gBACD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACN,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC3C,CAAC;YACL,CAAC;YACD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACR,MAAM,IAAI,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;YAChC,CAAC;QACL,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,WAAW,CAAC,SAAoD;QACnE,IAAI,UAAU,GAAG,CAAC,IAAI,CAAC,iBAAiB,GAAG,IAAI,mCAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC;QAEvF,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;IAClD,CAAC;IAEM,KAAK,CAAC,UAAuB;QAChC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAEM,YAAY,CAAC,UAA8B;QAC9C,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAEM,UAAU,CAAC,UAA4B;QAC1C,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QAEjF,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAEM,oBAAoB,CAAC,UAAsC;QAC9D,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QAEjF,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAEM,WAAW,CAAC,UAA6B;QAC5C,UAAU,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAiB,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAA,CAAC,CAAC;QAEtJ,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAEM,UAAU,CAAC,UAA4B;QAC1C,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACjD,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEnD,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAEM,aAAa,CAAC,UAA+B;QAChD,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QAEnE,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAEM,eAAe,CAAC,UAAiC;QACpD,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAEM,WAAW,CAAC,UAA6B;QAC5C,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC/C,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEjD,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAGM,WAAW,CAAC,UAA6B;QAC5C,EAAE,CAAA,CAAC,UAAU,CAAC,MAAM,CAAC;YACjB,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEvD,UAAU,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QAE7E,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAGM,UAAU,CAAC,UAA4B;QAC1C,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEvD,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAEM,WAAW,CAAC,UAA6B;QAC5C,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACnD,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEvD,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAEM,YAAY,CAAC,UAA8B;QAC9C,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC/C,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEjD,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAEM,gBAAgB,CAAC,UAAkC;QACtD,UAAU,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACzD,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACrD,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAErD,MAAM,CAAC,UAAU,CAAC;IAEtB,CAAC;IAED;;;;;;;OAOG;IACK,SAAS,CAAC,UAAe;QAC7B,IAAI,KAAkB,CAAC;QAEvB,MAAM,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YACtB,KAAK,YAAY;gBACb,MAAM,CAAC,IAAI,2CAAoB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAErD,KAAK,kBAAkB;gBACnB,MAAM,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CACjC,CAAC;oBACG,KAAK,gBAAgB;wBACjB,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;wBACzB,KAAM,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;wBAErE,MAAM,CAAC,KAAK,CAAC;oBAEjB;wBACI,MAAM,CAAC,IAAI,mCAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC5G,CAAC;YAEL,KAAK,gBAAgB;gBACjB,MAAM,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC7B,KAAK,YAAY;wBACb,MAAM,CAAC,IAAI,mCAAgB,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;oBAElJ;wBACI,MAAM,IAAI,KAAK,CAAC,0DAA0D,GAAG,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC7G,CAAC;YAEL,KAAK,eAAe;gBAChB,MAAM,CAAC,IAAI,qCAAiB,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAA;YAE1D,KAAK,gBAAgB;gBACjB,MAAM,CAAC,IAAI,qCAAiB,CAAC,UAAU,CAAC,KAAK,IAAI,IAAI,IAAI,UAAU,CAAC,KAAK,IAAI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YAExG,KAAK,aAAa;gBACd,MAAM,CAAC,IAAI,qCAAiB,CAAC,IAAI,CAAC,CAAC;YAEvC,KAAK,SAAS;gBACV,MAAM,CAAC,IAAI,qCAAiB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;YAElD,KAAK,uBAAuB;gBACxB,MAAM,CAAC,IAAI,6CAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;YAEzI,KAAK,eAAe;gBAChB,MAAM,CAAC,IAAI,mCAAgB,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAK,EAAE,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAE9K,KAAK,iBAAiB;gBAClB,EAAE,CAAA,CAAC,UAAU,CAAC,MAAM,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;oBACnD,IAAI,QAAQ,GAA8B,EAAE,EACxC,WAAW,GAAuB,EAAE,EACpC,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBAEjC,EAAE,CAAA,CAAC,KAAK,CAAC,IAAI,IAAI,oBAAoB,CAAC;wBAClC,QAAQ,CAAC,IAAI,CAAqB,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC,CAAA;oBAErF,QAAQ,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,GAAG,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACrN,WAAW,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,IAAI,oBAAoB,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAErI,MAAM,CAAC,IAAI,qDAAyB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;gBAChE,CAAC;gBAED,MAAM,CAAC,IAAI,qDAAyB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YAEjD,KAAK,iBAAiB;gBAClB,MAAM,CAAC,IAAI,iCAAe,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAA;YAEnG,KAAK,cAAc;gBACf,MAAM,CAAC,IAAI,iCAAe,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAEjH,KAAK,mBAAmB,CAAC;YACzB,KAAK,mBAAmB;gBACpB,MAAM,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC1B,KAAK,IAAI;wBACL,MAAM,CAAC,IAAI,qCAAiB,CAAC,uCAAmB,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC7H,KAAK,IAAI;wBACL,MAAM,CAAC,IAAI,qCAAiB,CAAC,uCAAmB,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;gBAChI,CAAC;gBACD,KAAK,CAAC;YAEV,KAAK,sBAAsB;gBACvB,MAAM,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC1B,KAAK,IAAI,CAAE,QAAQ;wBACf,MAAM,CAAC,IAAI,qCAAiB,CAAC,uCAAmB,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;oBAE/H,KAAK,IAAI,CAAE,YAAY;wBACnB,MAAM,CAAC,IAAI,qCAAiB,CAAC,uCAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;oBAElI,KAAK,GAAG,CAAE,SAAS;wBACf,MAAM,CAAC,IAAI,qCAAiB,CAAC,uCAAmB,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;oBAEhI,KAAK,IAAI,CAAE,kBAAkB;wBACzB,MAAM,CAAC,IAAI,qCAAiB,CAAC,uCAAmB,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;oBAEvI,KAAK,GAAG,CAAE,UAAU;wBAChB,MAAM,CAAC,IAAI,qCAAiB,CAAC,uCAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;oBAEjI,KAAK,IAAI,CAAE,mBAAmB;wBAC1B,MAAM,CAAC,IAAI,qCAAiB,CAAC,uCAAmB,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC5I,CAAC;gBACD,KAAK,CAAC;YAEV,KAAK,mBAAmB;gBACpB,MAAM,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAC5B,CAAC;oBACG,KAAK,IAAI;wBACL,MAAM,CAAC,IAAI,iCAAe,CAAC,mCAAiB,CAAC,SAAS,EAAE,gCAAc,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACzH,KAAK,IAAI;wBACL,MAAM,CAAC,IAAI,iCAAe,CAAC,mCAAiB,CAAC,SAAS,EAAE,gCAAc,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC7H,CAAC;gBACD,KAAK,CAAC;YAEV,KAAK,iBAAiB;gBAClB,MAAM,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC1B,KAAK,GAAG;wBACJ,MAAM,CAAC,IAAI,iCAAe,CAAC,mCAAiB,CAAC,MAAM,EAAE,gCAAc,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACrH,KAAK,GAAG;wBACJ,MAAM,CAAC,IAAI,iCAAe,CAAC,mCAAiB,CAAC,UAAU,EAAE,gCAAc,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACzH,KAAK,GAAG;wBACJ,MAAM,CAAC,IAAI,iCAAe,CAAC,mCAAiB,CAAC,QAAQ,EAAE,gCAAc,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACvH,KAAK,GAAG;wBACJ,MAAM,CAAC,IAAI,iCAAe,CAAC,mCAAiB,CAAC,QAAQ,EAAE,gCAAc,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACvH,KAAK,IAAI;wBACL,MAAM,CAAC,IAAI,iCAAe,CAAC,mCAAiB,CAAC,SAAS,EAAE,gCAAc,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACxH,KAAK,IAAI;wBACL,MAAM,CAAC,IAAI,iCAAe,CAAC,mCAAiB,CAAC,SAAS,EAAE,gCAAc,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC5H,CAAC;gBACD,KAAK,CAAC;YAEV,KAAK,iBAAiB;gBAClB,MAAM,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAC5B,CAAC;oBACG,KAAK,IAAI;wBACL,MAAM,CAAC,IAAI,mCAAgB,CAAC,qCAAkB,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;oBACjI,KAAK,IAAI;wBACL,MAAM,CAAC,IAAI,mCAAgB,CAAC,qCAAkB,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;oBAClI,KAAK,KAAK,CAAE,yBAAyB;wBACjC,MAAM,CAAC,IAAI,mCAAgB,CAAC,qCAAkB,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;gBACtI,CAAC;gBACD,KAAK,CAAC;YAEV,KAAK,mBAAmB;gBACpB,MAAM,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAC5B,CAAC;oBACG,KAAK,GAAG;wBACJ,MAAM,CAAC,IAAI,mCAAgB,CAAC,qCAAkB,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC1H,KAAK,GAAG;wBACJ,MAAM,CAAC,IAAI,mCAAgB,CAAC,qCAAkB,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;oBACnI,KAAK,GAAG;wBACJ,MAAM,CAAC,IAAI,mCAAgB,CAAC,qCAAkB,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC/H,CAAC;gBACD,KAAK,CAAC;YAEV,KAAK,kBAAkB;gBACnB,MAAM,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC1B,KAAK,GAAG,CAAE,WAAW;wBACjB,MAAM,CAAC,IAAI,mCAAgB,CAAC,qCAAkB,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;oBAEhI,KAAK,GAAG,CAAE,cAAc;wBACpB,MAAM,CAAC,IAAI,mCAAgB,CAAC,qCAAkB,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;oBAEnI,KAAK,GAAG,CAAE,iBAAiB;wBACvB,MAAM,CAAC,IAAI,mCAAgB,CAAC,qCAAkB,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;oBAEtI,KAAK,GAAG,CAAE,WAAW;wBACjB,MAAM,CAAC,IAAI,mCAAgB,CAAC,qCAAkB,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;oBAEhI,KAAK,GAAG,CAAE,UAAU;wBAChB,MAAM,CAAC,IAAI,mCAAgB,CAAC,qCAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC;gBACD,KAAK,CAAC;QACd,CAAC;QAED,MAAM,IAAI,KAAK,CAAC,mBAAmB,GAAG,UAAU,CAAC,IAAI,GAAG,cAAc,CAAC,CAAC;IAC5E,CAAC;CAGJ;AArUD,8CAqUC;AAED,yEAAyE;AACzE,oNAAoN;AAEpN,2CAAuE;AAAjD,kCAAA,UAAU,CAAA;AAAE,sCAAA,cAAc,CAAA;AAChD,yDAA4E;AAA/C,gDAAA,iBAAiB,CAAA;AAE9C,+DAAqF;AAArD,sDAAA,oBAAoB,CAAA;AACpD,uDAAyE;AAA7C,8CAAA,gBAAgB,CAAA;AAC5C,uDAAyE;AAA7C,8CAAA,gBAAgB,CAAA;AAC5C,qDAAyG;AAA9E,4CAAA,eAAe,CAAA;AAAE,8CAAA,iBAAiB,CAAA;AAAE,2CAAA,cAAc,CAAA;AAC7E,uDAA6F;AAAjE,8CAAA,gBAAgB,CAAA;AAAE,gDAAA,kBAAkB,CAAA;AAChE,yDAAiG;AAApE,gDAAA,iBAAiB,CAAA;AAAE,kDAAA,mBAAmB,CAAA;AACnE,iEAAwF;AAAvD,wDAAA,qBAAqB,CAAA;AACtD,qDAAsE;AAA3C,4CAAA,eAAe,CAAA;AAC1C,qDAAsE;AAA3C,4CAAA,eAAe,CAAA;AAC1C,yEAAoG;AAA/D,gEAAA,yBAAyB,CAAA;AAC9D,uDAA0F;AAA9D,8CAAA,gBAAgB,CAAA","sourcesContent":["import ODataParser from './../../lib/odata-parser';\r\nimport JavascriptParser from './../../lib/javascript-parser';\r\n\r\nimport { IExpressionVisitor, IExpressionStack } from './interfaces/iexpressionvisitor'\r\n\r\nimport { IExpression, Expression, ExpressionType } from './expression';\r\nimport { ILiteralExpression, LiteralExpression } from './literalexpression';\r\nimport { IIndexExpression, IndexExpression } from './indexexpression';\r\nimport { ICompoundExpression } from './compoundexpression';\r\nimport { IIdentifierExpression, IdentifierExpression } from './identifierexpression';\r\nimport { IMemberExpression, MemberExpression } from './memberexpression';\r\nimport { IMethodExpression, MethodExpression } from './methodexpression';\r\nimport { IUnaryExpression, UnaryExpression, UnaryOperatorType, UnaryAffixType } from './unaryexpression';\r\nimport { IBinaryExpression, BinaryExpression, BinaryOperatorType } from './binaryexpression';\r\nimport { ILogicalExpression, LogicalExpression, LogicalOperatorType } from './logicalexpression';\r\nimport { IConditionalExpression, ConditionalExpression } from './conditionalexpression';\r\nimport { IArrayExpression, ArrayExpression } from './arrayexpression';\r\nimport { ITemplateLiteralExpression, TemplateLiteralExpression } from './templateliteralexpression';\r\nimport { IObjectExpression, ObjectExpression, IObjectProperty} from './objectexpression';\r\n\r\nimport { LambdaExpression } from './lambdaexpression';\r\n\r\n\r\nexport class ExpressionStack implements IExpressionStack {\r\n    private items: Array<IExpression>;\r\n    private count: number;\r\n\r\n    constructor() {\r\n        this.items = [];\r\n        this.count = 0;\r\n    }\r\n\r\n    public length() {\r\n        return this.count;\r\n    }\r\n\r\n    public push(item: IExpression) {\r\n        this.items.push(item);\r\n        this.count = this.count + 1;\r\n    }\r\n\r\n    public pop(): IExpression {\r\n        if (this.count > 0) {\r\n            this.count = this.count - 1;\r\n        }\r\n\r\n        return this.items.pop();\r\n    }\r\n\r\n    public peek(steps: number = 0): IExpression {\r\n        if ((this.count + steps) <= 1)\r\n            return <any>{ // dummy\r\n                type: 0\r\n            };\r\n\r\n        return this.items[this.count - 2 + steps]; // current object is always last\r\n    }\r\n}\r\n\r\nexport class ExpressionVisitor implements IExpressionVisitor {\r\n    protected _lambdaExpression: LambdaExpression;\r\n    private _expressionStack: ExpressionStack;\r\n\r\n    constructor() {\r\n        this._expressionStack = new ExpressionStack();\r\n    }\r\n\r\n    public get stack(): ExpressionStack {\r\n        return this._expressionStack;\r\n    }\r\n\r\n    public visitOData(filter: string): IExpression {\r\n        filter = filter.replace(/[\"']?(\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}(?::\\d{2}(?:\\.\\d{1,3})?)?)?(?:Z|[+-]\\d{2}:\\d{2})?)[\"']?/gi, (value, date) => ['\\'', date, '\\''].join('')); // odata-parser doesn't support date as type, converting it to string\r\n\r\n        let ast = ODataParser.parse(filter);\r\n        try {\r\n            if (ast) {\r\n                return this.visit(this.transform(ast));\r\n            }\r\n        }\r\n        catch (ex) {\r\n            throw new Error(ex.message);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public visitLambdaExpression(expression: string): IExpression {\r\n        if (expression) {\r\n            let ast = JavascriptParser.parse(expression);\r\n            try {\r\n                if (ast) {\r\n                    return this.visit(this.transform(ast));\r\n                }\r\n            }\r\n            catch (ex) {\r\n                throw new Error(ex.message);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public visitLambda(predicate: (it: Object, ...param: Array<any>) => any): IExpression {\r\n        var expression = (this._lambdaExpression = new LambdaExpression(predicate)).expression;\r\n\r\n        return this.visitLambdaExpression(expression);\r\n    }\r\n\r\n    public visit(expression: IExpression): IExpression {\r\n        return expression.accept(this);\r\n    }\r\n\r\n    public visitLiteral(expression: ILiteralExpression): IExpression {\r\n        return expression;\r\n    }\r\n\r\n    public visitArray(expression: IArrayExpression): IExpression {\r\n        expression.elements = expression.elements.map((element) => element.accept(this));\r\n\r\n        return expression;\r\n    }\r\n\r\n    public visitTemplateLiteral(expression: ITemplateLiteralExpression): IExpression {\r\n        expression.elements = expression.elements.map((element) => element.accept(this));\r\n\r\n        return expression;\r\n    }\r\n\r\n    public visitObject(expression: IObjectExpression): IExpression {\r\n        expression.properties = expression.properties.map((element) => <IObjectProperty>{ key: element.key.accept(this), value: element.value.accept(this) });\r\n\r\n        return expression;\r\n    }\r\n\r\n    public visitIndex(expression: IIndexExpression): IExpression {\r\n        expression.index = expression.index.accept(this);\r\n        expression.object = expression.object.accept(this);\r\n\r\n        return expression;\r\n    }\r\n\r\n    public visitCompound(expression: ICompoundExpression): IExpression {\r\n        expression.body = expression.body.map((expr) => expr.accept(this));\r\n\r\n        return expression;\r\n    }\r\n\r\n    public visitIdentifier(expression: IIdentifierExpression): IExpression {\r\n        return expression;\r\n    }\r\n\r\n    public visitBinary(expression: IBinaryExpression): IExpression {\r\n        expression.left = expression.left.accept(this);\r\n        expression.right = expression.right.accept(this);\r\n\r\n        return expression;\r\n    }\r\n\r\n\r\n    public visitMethod(expression: IMethodExpression): IExpression {\r\n        if(expression.caller)\r\n            expression.caller = expression.caller.accept(this);\r\n\r\n        expression.parameters = expression.parameters.map((arg) => arg.accept(this));\r\n\r\n        return expression;\r\n    }\r\n\r\n\r\n    public visitUnary(expression: IUnaryExpression): IExpression {\r\n        expression.argument = expression.argument.accept(this);\r\n\r\n        return expression;\r\n    }\r\n\r\n    public visitMember(expression: IMemberExpression): IExpression {\r\n        expression.object = expression.object.accept(this);\r\n        expression.property = expression.property.accept(this);\r\n\r\n        return expression;\r\n    }\r\n\r\n    public visitLogical(expression: ILogicalExpression): IExpression {\r\n        expression.left = expression.left.accept(this);\r\n        expression.right = expression.right.accept(this);\r\n\r\n        return expression;\r\n    }\r\n\r\n    public visitConditional(expression: IConditionalExpression): IExpression {\r\n        expression.condition = expression.condition.accept(this);\r\n        expression.success = expression.success.accept(this);\r\n        expression.failure = expression.failure.accept(this);\r\n\r\n        return expression;\r\n\r\n    }\r\n\r\n    /**\r\n     * transform pegjs expression ast tree to our internal ast tree to make it easier to swap expression parser at a later time\r\n     * @see\r\n     * http://www.odata.org/documentation/odata-version-2-0/uri-conventions/\r\n     *\r\n     * @param expression pegjs expression object\r\n     * @returns \r\n     */\r\n    private transform(expression: any): IExpression {\r\n        var child: IExpression;\r\n\r\n        switch (expression.type) {\r\n            case 'Identifier':\r\n                return new IdentifierExpression(expression.name);\r\n\r\n            case 'MemberExpression':\r\n                switch (expression.property.type)\r\n                {\r\n                    case 'CallExpression':\r\n                        child = this.transform(expression.property);\r\n                        (<MethodExpression>child).caller = this.transform(expression.object);\r\n\r\n                        return child;\r\n\r\n                    default:\r\n                        return new MemberExpression(this.transform(expression.object), this.transform(expression.property));\r\n                }\r\n                \r\n            case 'CallExpression':\r\n                switch (expression.object.type) {\r\n                    case 'Identifier':\r\n                        return new MethodExpression(expression.object.name, expression.arguments ? expression.arguments.map((arg) => this.transform(arg)) : [], null);\r\n\r\n                    default:\r\n                        throw new Error('Caller of method expression is not a Identifier, but is ' + expression.object.type);\r\n                }\r\n\r\n            case 'NumberLiteral':\r\n                return new LiteralExpression(Number(expression.value))\r\n\r\n            case 'BooleanLiteral':\r\n                return new LiteralExpression(expression.value == true || expression.value == 'true' ? true : false);\r\n\r\n            case 'NullLiteral':\r\n                return new LiteralExpression(null);\r\n\r\n            case 'Literal':\r\n                return new LiteralExpression(expression.value)\r\n\r\n            case 'ConditionalExpression':\r\n                return new ConditionalExpression(this.transform(expression.test), this.transform(expression.left), this.transform(expression.right));\r\n\r\n            case 'ObjectLiteral':\r\n                return new ObjectExpression(expression.properties ? expression.properties.map(value => <any>{ key: this.transform(value.key), value: this.transform(value.value) }) : []);\r\n\r\n            case 'TemplateLiteral':\r\n                if(expression.values && expression.values.length > 0) {\r\n                    let literals: Array<ILiteralExpression> = [], \r\n                        expressions: Array<IExpression> = [],\r\n                        first = expression.values[0];\r\n\r\n                    if(first.type == 'TemplateExpression') \r\n                        literals.push(<ILiteralExpression>this.transform({ type: 'Literal', value: '' }))\r\n\r\n                    literals.push(...expression.values.filter(value => value.type == 'Literal').map(value => this.transform(value)).map(literal => { literal.value = literal.value.replace(/(\\\\)?\\$(\\\\)?\\{/g, '${'); return literal; }));\r\n                    expressions.push(...expression.values.filter(value => value.type == 'TemplateExpression').map(value => this.transform(value.value)));\r\n\r\n                    return new TemplateLiteralExpression(literals, expressions);\r\n                }\r\n\r\n                return new TemplateLiteralExpression([], []);\r\n\r\n            case 'ArrayExpression':\r\n                return new IndexExpression(this.transform(expression.object), this.transform(expression.index))\r\n\r\n            case 'ArrayLiteral':\r\n                return new ArrayExpression(expression.elements ? expression.elements.map((arg) => this.transform(arg)) : []);\r\n\r\n            case 'LogicalExpression':\r\n            case 'LogicalExpression':\r\n                switch (expression.operator) {\r\n                    case '&&':\r\n                        return new LogicalExpression(LogicalOperatorType.And, this.transform(expression.left), this.transform(expression.right));\r\n                    case '||':\r\n                        return new LogicalExpression(LogicalOperatorType.Or, this.transform(expression.left), this.transform(expression.right));\r\n                }\r\n                break;\r\n\r\n            case 'RelationalExpression':\r\n                switch (expression.operator) {\r\n                    case '==': // equal\r\n                        return new LogicalExpression(LogicalOperatorType.Equal, this.transform(expression.left), this.transform(expression.right));\r\n\r\n                    case '!=': // not equal\r\n                        return new LogicalExpression(LogicalOperatorType.NotEqual, this.transform(expression.left), this.transform(expression.right));\r\n\r\n                    case '<': // lesser\r\n                        return new LogicalExpression(LogicalOperatorType.Lesser, this.transform(expression.left), this.transform(expression.right));\r\n\r\n                    case '<=': // lesser or equal\r\n                        return new LogicalExpression(LogicalOperatorType.LesserOrEqual, this.transform(expression.left), this.transform(expression.right));\r\n\r\n                    case '>': // greater\r\n                        return new LogicalExpression(LogicalOperatorType.Greater, this.transform(expression.left), this.transform(expression.right));\r\n\r\n                    case '>=': // greater or equal\r\n                        return new LogicalExpression(LogicalOperatorType.GreaterOrEqual, this.transform(expression.left), this.transform(expression.right));\r\n                }\r\n                break;\r\n\r\n            case 'PostfixExpression':\r\n                switch (expression.operator)\r\n                {\r\n                    case '--':\r\n                        return new UnaryExpression(UnaryOperatorType.Decrement, UnaryAffixType.Postfix, this.transform(expression.argument));\r\n                    case '++':\r\n                        return new UnaryExpression(UnaryOperatorType.Increment, UnaryAffixType.Postfix, this.transform(expression.argument));\r\n                }\r\n                break;\r\n\r\n            case 'UnaryExpression':\r\n                switch (expression.operator) {\r\n                    case '!':\r\n                        return new UnaryExpression(UnaryOperatorType.Invert, UnaryAffixType.Prefix, this.transform(expression.argument));\r\n                    case '~':\r\n                        return new UnaryExpression(UnaryOperatorType.Complement, UnaryAffixType.Prefix, this.transform(expression.argument));\r\n                    case '+':\r\n                        return new UnaryExpression(UnaryOperatorType.Positive, UnaryAffixType.Prefix, this.transform(expression.argument));\r\n                    case '-':\r\n                        return new UnaryExpression(UnaryOperatorType.Negative, UnaryAffixType.Prefix, this.transform(expression.argument));\r\n                    case '--':\r\n                        return new UnaryExpression(UnaryOperatorType.Decrement, UnaryAffixType.Prefix, this.transform(expression.argument));\r\n                    case '++':\r\n                        return new UnaryExpression(UnaryOperatorType.Increment, UnaryAffixType.Prefix, this.transform(expression.argument));\r\n                }\r\n                break;\r\n\r\n            case 'ShiftExpression':\r\n                switch (expression.operator)\r\n                {\r\n                    case '<<':\r\n                        return new BinaryExpression(BinaryOperatorType.LeftShift, this.transform(expression.left), this.transform(expression.right));\r\n                    case '>>':\r\n                        return new BinaryExpression(BinaryOperatorType.RightShift, this.transform(expression.left), this.transform(expression.right));\r\n                    case '>>>': // zero-fill right-shift \r\n                        return new BinaryExpression(BinaryOperatorType.RightShift, this.transform(expression.left), this.transform(expression.right));\r\n                }\r\n                break;\r\n\r\n            case 'BitwiseExpression':\r\n                switch (expression.operator)\r\n                {\r\n                    case '|':\r\n                        return new BinaryExpression(BinaryOperatorType.Or, this.transform(expression.left), this.transform(expression.right));\r\n                    case '^':\r\n                        return new BinaryExpression(BinaryOperatorType.ExclusiveOr, this.transform(expression.left), this.transform(expression.right));\r\n                    case '&':\r\n                        return new BinaryExpression(BinaryOperatorType.And, this.transform(expression.left), this.transform(expression.right));\r\n                }\r\n                break;\r\n\r\n            case 'BinaryExpression':\r\n                switch (expression.operator) {\r\n                    case '+': // addition\r\n                        return new BinaryExpression(BinaryOperatorType.Addition, this.transform(expression.left), this.transform(expression.right));\r\n\r\n                    case '-': // subtraction\r\n                        return new BinaryExpression(BinaryOperatorType.Subtraction, this.transform(expression.left), this.transform(expression.right));\r\n\r\n                    case '*': // multiplication\r\n                        return new BinaryExpression(BinaryOperatorType.Multiplication, this.transform(expression.left), this.transform(expression.right));\r\n\r\n                    case '/': // division\r\n                        return new BinaryExpression(BinaryOperatorType.Division, this.transform(expression.left), this.transform(expression.right));\r\n\r\n                    case '%': // modulus\r\n                        return new BinaryExpression(BinaryOperatorType.Modulus, this.transform(expression.left), this.transform(expression.right));\r\n                }\r\n                break;                \r\n        }\r\n\r\n        throw new Error('Expression type \"' + expression.type + '\" is unknown');\r\n    }\r\n\r\n  \r\n}\r\n\r\n//export { IExpression, Expression, ExpressionType } from './expression';\r\n//export { IArrayExpression, IBinaryExpression, ICompoundExpression, IConditionalExpression, IIdentifierExpression, ILiteralExpression, ILogicalExpression, IMemberExpression, IMethodExpression, IUnaryExpression }\r\n\r\nexport { IExpression, Expression, ExpressionType } from './expression';\r\nexport { ILiteralExpression, LiteralExpression } from './literalexpression';\r\nexport { ICompoundExpression } from './compoundexpression';\r\nexport { IIdentifierExpression, IdentifierExpression } from './identifierexpression';\r\nexport { IMemberExpression, MemberExpression } from './memberexpression';\r\nexport { IMethodExpression, MethodExpression } from './methodexpression';\r\nexport { IUnaryExpression, UnaryExpression, UnaryOperatorType, UnaryAffixType } from './unaryexpression';\r\nexport { IBinaryExpression, BinaryExpression, BinaryOperatorType } from './binaryexpression';\r\nexport { ILogicalExpression, LogicalExpression, LogicalOperatorType } from './logicalexpression';\r\nexport { IConditionalExpression, ConditionalExpression } from './conditionalexpression';\r\nexport { IArrayExpression, ArrayExpression } from './arrayexpression';\r\nexport { IIndexExpression, IndexExpression } from './indexexpression';\r\nexport { ITemplateLiteralExpression, TemplateLiteralExpression } from './templateliteralexpression';\r\nexport { IObjectExpression, ObjectExpression, IObjectProperty } from './objectexpression';"]}