{"version":3,"file":"logicalexpression.js","sourceRoot":"","sources":["../../../src/linq/expressions/logicalexpression.ts"],"names":[],"mappings":";;AAAA,6CAAuE;AAEvE,IAAY,mBASX;AATD,WAAY,mBAAmB;IAC3B,2DAAG,CAAA;IACH,yDAAE,CAAA;IACF,qEAAQ,CAAA;IACR,+EAAa,CAAA;IACb,iFAAc,CAAA;IACd,iEAAM,CAAA;IACN,mEAAO,CAAA;IACP,+DAAK,CAAA,CAAW,KAAK;AACzB,CAAC,EATW,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAS9B;AAQD,uBAA+B,SAAQ,uBAAU;IAC7C,YAAmB,QAA6B,EAAS,IAAiB,EAAS,KAAkB;QACjG,KAAK,CAAC,2BAAc,CAAC,OAAO,CAAC,CAAC;QADf,aAAQ,GAAR,QAAQ,CAAqB;QAAS,SAAI,GAAJ,IAAI,CAAa;QAAS,UAAK,GAAL,KAAK,CAAa;IAErG,CAAC;IAEM,KAAK,CAAC,UAA8B;QACvC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAC/I,MAAM,CAAC,IAAI,CAAC;QAEhB,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACpB,KAAK,mBAAmB,CAAC,GAAG,CAAC;YAC7B,KAAK,mBAAmB,CAAC,EAAE,CAAC;YAC5B,KAAK,mBAAmB,CAAC,QAAQ,CAAC;YAClC,KAAK,mBAAmB,CAAC,KAAK;gBAC1B,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAE1H,KAAK,mBAAmB,CAAC,OAAO;gBAC5B,MAAM,CAAC,UAAU,CAAC,QAAQ,IAAI,mBAAmB,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAEvI,KAAK,mBAAmB,CAAC,cAAc;gBACnC,MAAM,CAAC,UAAU,CAAC,QAAQ,IAAI,mBAAmB,CAAC,aAAa,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAE9I,KAAK,mBAAmB,CAAC,MAAM;gBAC3B,MAAM,CAAC,UAAU,CAAC,QAAQ,IAAI,mBAAmB,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAExI,KAAK,mBAAmB,CAAC,aAAa;gBAClC,MAAM,CAAC,UAAU,CAAC,QAAQ,IAAI,mBAAmB,CAAC,cAAc,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACnJ,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;CACJ;AA/BD,8CA+BC","sourcesContent":["import { IExpression, Expression, ExpressionType } from './expression';\r\n\r\nexport enum LogicalOperatorType {\r\n    And,            // &&\r\n    Or,             // ||\r\n    NotEqual,       // !=\r\n    LesserOrEqual,  // <=\r\n    GreaterOrEqual, // >=\r\n    Lesser,         // <\r\n    Greater,        // >\r\n    Equal           // ==\r\n}\r\n\r\nexport interface ILogicalExpression extends IExpression {\r\n    operator: LogicalOperatorType\r\n    left: IExpression\r\n    right: IExpression\r\n}\r\n\r\nexport class LogicalExpression extends Expression implements ILogicalExpression {\r\n    constructor(public operator: LogicalOperatorType, public left: IExpression, public right: IExpression) {\r\n        super(ExpressionType.Logical);\r\n    }\r\n\r\n    public equal(expression: ILogicalExpression) {\r\n        if (this.type == expression.type && this.operator == expression.operator && this.left.equal(expression.left) && this.right.equal(expression.right))\r\n            return true;\r\n\r\n        switch (this.operator) {\r\n            case LogicalOperatorType.And:\r\n            case LogicalOperatorType.Or:\r\n            case LogicalOperatorType.NotEqual:\r\n            case LogicalOperatorType.Equal:\r\n                return this.operator == expression.operator && this.left.equal(expression.right) && this.right.equal(expression.left);\r\n\r\n            case LogicalOperatorType.Greater: // 5 > 2 == 2 < 5\r\n                return expression.operator == LogicalOperatorType.Lesser && this.left.equal(expression.right) && this.right.equal(expression.left);\r\n\r\n            case LogicalOperatorType.GreaterOrEqual: // 5 >= 2 == 2 <= 5\r\n                return expression.operator == LogicalOperatorType.LesserOrEqual && this.left.equal(expression.right) && this.right.equal(expression.left);\r\n\r\n            case LogicalOperatorType.Lesser: // 5 < 2 == 2 > 5\r\n                return expression.operator == LogicalOperatorType.Greater && this.left.equal(expression.right) && this.right.equal(expression.left);\r\n\r\n            case LogicalOperatorType.LesserOrEqual: // 5 <= 2 == 2 >= 5\r\n                return expression.operator == LogicalOperatorType.GreaterOrEqual && this.left.equal(expression.right) && this.right.equal(expression.left);\r\n        }\r\n\r\n        return false;\r\n    }\r\n}"]}