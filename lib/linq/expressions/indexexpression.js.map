{"version":3,"file":"indexexpression.js","sourceRoot":"","sources":["../../../src/linq/expressions/indexexpression.ts"],"names":[],"mappings":";;AAAA,6CAAuE;AAOvE,qBAA6B,SAAQ,uBAAU;IAC3C,YAAmB,MAAmB,EAAS,KAAkB;QAC7D,KAAK,CAAC,2BAAc,CAAC,KAAK,CAAC,CAAC;QADb,WAAM,GAAN,MAAM,CAAa;QAAS,UAAK,GAAL,KAAK,CAAa;IAEjE,CAAC;IAEM,KAAK,CAAC,UAA4B;QACrC,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACtH,CAAC;CACJ;AARD,0CAQC","sourcesContent":["import { IExpression, Expression, ExpressionType } from './expression';\n\nexport interface IIndexExpression extends IExpression {\n    object: IExpression\n    index: IExpression\n}\n\nexport class IndexExpression extends Expression implements IIndexExpression {\n    constructor(public object: IExpression, public index: IExpression) {\n        super(ExpressionType.Index);\n    }\n\n    public equal(expression: IIndexExpression): boolean {\n        return this.type == expression.type && this.object.equal(expression.object) && this.index.equal(expression.index);\n    }\n}"]}