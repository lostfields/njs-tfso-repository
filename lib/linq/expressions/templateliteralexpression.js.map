{"version":3,"file":"templateliteralexpression.js","sourceRoot":"","sources":["../../../src/linq/expressions/templateliteralexpression.ts"],"names":[],"mappings":";;AAAA,6CAAuE;AAMvE,+BAAuC,SAAQ,uBAAU;IACrD,YAAmB,QAA4B;QAC3C,KAAK,CAAC,2BAAc,CAAC,eAAe,CAAC,CAAC;QADvB,aAAQ,GAAR,QAAQ,CAAoB;IAE/C,CAAC;IAEM,KAAK,CAAC,UAAsC;QAC/C,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CACvF,CAAC;YACG,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAC7C,CAAC;gBACG,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC;oBACxD,MAAM,CAAC,KAAK,CAAC;YACrB,CAAC;YAED,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;CACJ;AAnBD,8DAmBC","sourcesContent":["import { IExpression, Expression, ExpressionType } from './expression';\n\nexport interface ITemplateLiteralExpression extends IExpression {\n    elements: Array<IExpression>\n}\n\nexport class TemplateLiteralExpression extends Expression implements ITemplateLiteralExpression {\n    constructor(public elements: Array<IExpression>) {\n        super(ExpressionType.TemplateLiteral);\n    }\n\n    public equal(expression: ITemplateLiteralExpression): boolean {\n        if (this.type == expression.type && this.elements.length == expression.elements.length)\n        {\n            for (let i = 0; i < this.elements.length; i++)\n            {\n                if (this.elements[i].equal(expression.elements[i]) == false)\n                    return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n}"]}