{"version":3,"file":"methodexpression.js","sourceRoot":"","sources":["../../../src/linq/expressions/methodexpression.ts"],"names":[],"mappings":";;AAAA,6CAAuE;AAQvE,sBAA8B,SAAQ,uBAAU;IAC5C,YAAmB,IAAY,EAAS,UAA8B,EAAS,MAAmB;QAC9F,KAAK,CAAC,2BAAc,CAAC,MAAM,CAAC,CAAC;QADd,SAAI,GAAJ,IAAI,CAAQ;QAAS,eAAU,GAAV,UAAU,CAAoB;QAAS,WAAM,GAAN,MAAM,CAAa;IAElG,CAAC;IAEM,KAAK,CAAC,UAA6B;QACtC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,IAAI,UAAU,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CACjK,CAAC;YACG,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,IAAI,UAAU,CAAC,UAAU,IAAI,IAAI,CAAC;gBACzD,MAAM,CAAC,IAAI,CAAC;YAEhB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC;gBACvD,MAAM,CAAC,KAAK,CAAC;YAEjB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC9C,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC;oBAC5D,MAAM,CAAC,KAAK,CAAC;YACrB,CAAC;YAED,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;CACJ;AAxBD,4CAwBC","sourcesContent":["import { IExpression, Expression, ExpressionType } from './expression';\r\n\r\nexport interface IMethodExpression extends IExpression {\r\n    name: string\r\n    parameters: Array<IExpression>\r\n    caller: IExpression\r\n}\r\n\r\nexport class MethodExpression extends Expression implements IMethodExpression {\r\n    constructor(public name: string, public parameters: Array<IExpression>, public caller: IExpression) {\r\n        super(ExpressionType.Method);\r\n    }\r\n\r\n    public equal(expression: IMethodExpression): boolean {\r\n        if (this.type == expression.type && this.name == expression.name && ((this.caller == null && expression.caller == null) || this.caller.equal(expression.caller)))\r\n        {\r\n            if (this.parameters == null && expression.parameters == null)\r\n                return true;\r\n\r\n            if (this.parameters.length != expression.parameters.length)\r\n                return false;\r\n\r\n            for (let i = 0; i < this.parameters.length; i++) {\r\n                if (this.parameters[i].equal(expression.parameters[i]) == false)\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}"]}