{"version":3,"file":"reducervisitor.js","sourceRoot":"","sources":["../../../src/linq/expressions/reducervisitor.ts"],"names":[],"mappings":"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","sourcesContent":["import { IExpression, Expression, ExpressionType } from './expression';\r\nimport { ILiteralExpression, LiteralExpression } from './literalexpression';\r\nimport { ICompoundExpression } from './compoundexpression';\r\nimport { IIdentifierExpression, IdentifierExpression } from './identifierexpression';\r\nimport { IMemberExpression, MemberExpression } from './memberexpression';\r\nimport { IMethodExpression, MethodExpression } from './methodexpression';\r\nimport { IUnaryExpression, UnaryExpression, UnaryOperatorType, UnaryAffixType } from './unaryexpression';\r\nimport { IBinaryExpression, BinaryExpression, BinaryOperatorType } from './binaryexpression';\r\nimport { ILogicalExpression, LogicalExpression, LogicalOperatorType } from './logicalexpression';\r\nimport { IConditionalExpression } from './conditionalexpression';\r\nimport { IArrayExpression, ArrayExpression } from './arrayexpression';\r\n\r\nimport { LambdaExpression } from './lambdaexpression';\r\nimport { ExpressionVisitor } from './expressionvisitor';\r\n\r\nexport class ReducerVisitor extends ExpressionVisitor {\r\n    private _params: Array<any>\r\n    private _isSolvable: boolean;\r\n\r\n    private _parentExpressionStack: Array<IExpression> = [];\r\n\r\n    constructor(...param: Array<any>) {\r\n        super();\r\n\r\n        this._params = param || null;\r\n    }\r\n\r\n    public get isSolvable(): boolean {\r\n        return this._isSolvable;\r\n    }\r\n\r\n    public visitLambda(predicate: (it: Object, ...param: Array<any>) => any, ...param: Array<any>): IExpression {\r\n        this._isSolvable = true; // reset it as checks for solvability is done for each visit\r\n\r\n        if (param.length > 0)\r\n            this._params = param;\r\n\r\n        return super.visitLambda(predicate);\r\n    }\r\n\r\n    public visitLiteral(expression: ILiteralExpression): IExpression {\r\n        let value = this.evaluate(expression);\r\n\r\n        return new LiteralExpression(value);\r\n    }\r\n\r\n    public visitIdentifier(expression: IIdentifierExpression): IExpression {\r\n        var obj = this.evaluate(expression);\r\n\r\n        if (obj != null) {\r\n            return new LiteralExpression(obj);\r\n        } else {\r\n            this._isSolvable = false;\r\n        }\r\n\r\n        return expression;\r\n    }\r\n\r\n    public visitMember(expression: IMemberExpression): IExpression {\r\n        let object, property;\r\n\r\n        if ((object = expression.object).type != ExpressionType.Identifier)\r\n            object = expression.object.accept(this);\r\n\r\n        if ((property = expression.property).type != ExpressionType.Identifier)\r\n            property = expression.property.accept(this);\r\n\r\n        let obj = this.evaluate(object);\r\n\r\n        if (obj != null && typeof obj == 'object') {\r\n            var idx;\r\n            switch (property.type) {\r\n                case ExpressionType.Identifier:\r\n                    idx = (<IIdentifierExpression>property).name;\r\n\r\n                    break;\r\n\r\n                case ExpressionType.Array:\r\n                    if ((<IArrayExpression>property).elements.length == 1)\r\n                        idx = this.evaluate((<IArrayExpression>property).elements[0]);\r\n\r\n                    break;\r\n            }\r\n\r\n            if (idx != null) {\r\n                switch (typeof obj[idx]) {\r\n                    case 'string':\r\n                    case 'number':\r\n                        return new LiteralExpression(obj[idx]);\r\n\r\n                    case 'object':\r\n                    // check for date\r\n\r\n                    default:\r\n                        this._isSolvable = false;\r\n                }\r\n            } else {\r\n                this._isSolvable = false;\r\n            }\r\n        }\r\n        else {\r\n            // no point to find out it's solvable if this MemberExpression is a nested MemberExpression of Parent.\r\n            if (this._lambdaExpression != null && this.stack.peek().type != ExpressionType.Member) {\r\n                if (object.type == ExpressionType.Identifier) {\r\n                    if ((<IIdentifierExpression>object).name != this._lambdaExpression.parameters[0])\r\n                        this._isSolvable = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return new MemberExpression(object, property);\r\n    }\r\n\r\n    public visitBinary(expression: IBinaryExpression): IExpression {\r\n        let left = expression.left.accept(this),\r\n            right = expression.right.accept(this);\r\n\r\n        if (left.type == ExpressionType.Literal && right.type == ExpressionType.Literal)\r\n        {\r\n            let leftValue = (<LiteralExpression>left).value,\r\n                rightValue = (<LiteralExpression>right).value;\r\n\r\n            switch (expression.operator) {\r\n                case BinaryOperatorType.Addition:\r\n                    return new LiteralExpression(leftValue + rightValue);\r\n\r\n                case BinaryOperatorType.Subtraction:\r\n                    return new LiteralExpression(leftValue - rightValue);\r\n\r\n                case BinaryOperatorType.Multiplication:\r\n                    return new LiteralExpression(leftValue * rightValue);\r\n\r\n                case BinaryOperatorType.Division:\r\n                    return new LiteralExpression(leftValue / rightValue);\r\n\r\n                case BinaryOperatorType.Modulus:\r\n                    return new LiteralExpression(leftValue % rightValue);\r\n\r\n                case BinaryOperatorType.And:\r\n                    return new LiteralExpression(leftValue & rightValue);\r\n\r\n                case BinaryOperatorType.Or:\r\n                    return new LiteralExpression(leftValue | rightValue);\r\n\r\n                case BinaryOperatorType.ExclusiveOr:\r\n                    return new LiteralExpression(leftValue ^ rightValue);\r\n\r\n                case BinaryOperatorType.LeftShift:\r\n                    return new LiteralExpression(leftValue << rightValue);\r\n\r\n                case BinaryOperatorType.RightShift:\r\n                    return new LiteralExpression(leftValue >> rightValue);\r\n            }\r\n        }\r\n\r\n        return new BinaryExpression(expression.operator, left, right);\r\n    }\r\n\r\n    public visitLogical(expression: ILogicalExpression): IExpression {\r\n        let left = expression.left.accept(this),\r\n            right = expression.right.accept(this);\r\n\r\n        if (left.type == ExpressionType.Literal && right.type == ExpressionType.Literal) {\r\n            let leftValue = (<LiteralExpression>left).value,\r\n                rightValue = (<LiteralExpression>right).value;\r\n\r\n            switch (expression.operator) {\r\n                case LogicalOperatorType.Equal:\r\n                    return new LiteralExpression(leftValue == rightValue);\r\n                case LogicalOperatorType.NotEqual:\r\n                    return new LiteralExpression(leftValue != rightValue);\r\n                case LogicalOperatorType.And:\r\n                    return new LiteralExpression(leftValue && rightValue);\r\n                case LogicalOperatorType.Or:\r\n                    return new LiteralExpression(leftValue || rightValue);\r\n                case LogicalOperatorType.Greater:\r\n                    return new LiteralExpression(leftValue > rightValue);\r\n                case LogicalOperatorType.GreaterOrEqual:\r\n                    return new LiteralExpression(leftValue >= rightValue);\r\n                case LogicalOperatorType.Lesser:\r\n                    return new LiteralExpression(leftValue < rightValue);\r\n                case LogicalOperatorType.LesserOrEqual:\r\n                    return new LiteralExpression(leftValue <= rightValue);\r\n            }\r\n        } \r\n\r\n        switch (expression.operator) {\r\n            case LogicalOperatorType.And:\r\n                if (expression.left.type == ExpressionType.Literal && (<LiteralExpression>expression.left).value === true) return right;\r\n                if (expression.right.type == ExpressionType.Literal && (<LiteralExpression>expression.right).value === true) return left;\r\n\r\n            default:\r\n                return new LogicalExpression(expression.operator, left, right);\r\n        }\r\n    }\r\n\r\n    protected evaluate(expression: IExpression): any {\r\n        var value: any = null;\r\n\r\n        switch (expression.type) {\r\n            case ExpressionType.Literal:\r\n                var literal = (<ILiteralExpression>expression);\r\n\r\n                if (typeof (value = literal.value) == 'string') {\r\n                    if (/^[+-]?[0-9]*(\\.[0-9]+)?$/i.test(literal.value) == true)\r\n                        value = parseFloat(literal.value);\r\n                    else if (literal.value == \"true\" || literal.value == \"false\")\r\n                        value = literal.value == \"true\" ? true : false;\r\n                    else if (isNaN((new Date(literal.value)).getTime()) == false) // check for date\r\n                        value = new Date(literal.value);\r\n                    else\r\n                        value = literal.value;\r\n                }\r\n\r\n                break;\r\n\r\n            case ExpressionType.Identifier:\r\n                var identifier = (<IIdentifierExpression>expression);\r\n\r\n                var idx: number = -1;\r\n\r\n                if (this._params.length > 0) {\r\n\r\n                    if (identifier.name == \"this\") {\r\n                        if (this._lambdaExpression.parameters.length == 1)\r\n                            return this._params[0];\r\n                    }\r\n                    else {\r\n\r\n                        if ((idx = this._lambdaExpression.parameters.indexOf(identifier.name) - 1) >= 0) {\r\n                            if (this._params.length >= 0 && this._params.length > idx)\r\n                                value = this._params[idx];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                break;\r\n                \r\n        }\r\n\r\n        return value;\r\n    }\r\n}\r\n\r\nexport { IExpression, Expression, ExpressionType } from './expression';\r\nexport { ILiteralExpression, LiteralExpression } from './literalexpression';\r\nexport { ICompoundExpression } from './compoundexpression';\r\nexport { IIdentifierExpression, IdentifierExpression } from './identifierexpression';\r\nexport { IMemberExpression, MemberExpression } from './memberexpression';\r\nexport { IMethodExpression, MethodExpression } from './methodexpression';\r\nexport { IUnaryExpression, UnaryExpression, UnaryOperatorType, UnaryAffixType } from './unaryexpression';\r\nexport { IBinaryExpression, BinaryExpression, BinaryOperatorType } from './binaryexpression';\r\nexport { ILogicalExpression, LogicalExpression, LogicalOperatorType } from './logicalexpression';\r\nexport { IConditionalExpression } from './conditionalexpression';\r\nexport { IArrayExpression, ArrayExpression } from './arrayexpression';"]}