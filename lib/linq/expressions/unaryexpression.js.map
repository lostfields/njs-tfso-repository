{"version":3,"file":"unaryexpression.js","sourceRoot":"","sources":["../../../src/linq/expressions/unaryexpression.ts"],"names":[],"mappings":";;AAAA,oEAAoG;AAazE,4BAbA,oCAAiB,CAaA;AAAE,yBAbA,iCAAc,CAaA;AAZ5D,6CAAuE;AAEvE,qBAA6B,SAAQ,uBAAU;IAC3C,YAAmB,QAA2B,EAAS,KAAqB,EAAS,QAAqB;QACtG,KAAK,CAAC,2BAAc,CAAC,KAAK,CAAC,CAAC;QADb,aAAQ,GAAR,QAAQ,CAAmB;QAAS,UAAK,GAAL,KAAK,CAAgB;QAAS,aAAQ,GAAR,QAAQ,CAAa;IAE1G,CAAC;IAEM,KAAK,CAAC,UAA4B;QACrC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;IAChK,CAAC;CACJ;AARD,0CAQC","sourcesContent":["import { IUnaryExpression, UnaryOperatorType, UnaryAffixType } from './interfaces/iunaryexpression';\r\nimport { IExpression, Expression, ExpressionType } from './expression';\r\n\r\nexport class UnaryExpression extends Expression implements IUnaryExpression {\r\n    constructor(public operator: UnaryOperatorType, public affix: UnaryAffixType, public argument: IExpression) {\r\n        super(ExpressionType.Unary);\r\n    }\r\n\r\n    public equal(expression: IUnaryExpression) {\r\n        return (this.type == expression.type && this.operator == expression.operator && this.affix == expression.affix && this.argument.equal(expression.argument));\r\n    }\r\n}\r\n\r\nexport { IUnaryExpression, UnaryOperatorType, UnaryAffixType }"]}