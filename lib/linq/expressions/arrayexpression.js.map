{"version":3,"file":"arrayexpression.js","sourceRoot":"","sources":["../../../src/linq/expressions/arrayexpression.ts"],"names":[],"mappings":";;AACA,6CAAuE;AAEvE,qBAA6B,SAAQ,uBAAU;IAC3C,YAAmB,QAA4B;QAC3C,KAAK,CAAC,2BAAc,CAAC,KAAK,CAAC,CAAC;QADb,aAAQ,GAAR,QAAQ,CAAoB;IAE/C,CAAC;IAEM,KAAK,CAAC,UAA4B;QACrC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YAErF,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC;oBACxD,MAAM,CAAC,KAAK,CAAC;YACrB,CAAC;YAED,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAEM,QAAQ;QACX,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;IACtF,CAAC;CACJ;AAtBD,0CAsBC","sourcesContent":["import { IArrayExpression } from './interfaces/iarrayexpression';\r\nimport { IExpression, Expression, ExpressionType } from './expression';\r\n\r\nexport class ArrayExpression extends Expression implements IArrayExpression {\r\n    constructor(public elements: Array<IExpression>) {\r\n        super(ExpressionType.Array);\r\n    }\r\n\r\n    public equal(expression: IArrayExpression): boolean {\r\n        if (this.type == expression.type && this.elements.length == expression.elements.length) {\r\n\r\n            for (let i = 0; i < this.elements.length; i++) {\r\n                if (this.elements[i].equal(expression.elements[i]) == false)\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public toString() {\r\n        return `[${(this.elements || []).map(element => element.toString()).join(', ')}]`;\r\n    }\r\n}\r\n\r\nexport { IArrayExpression };"]}